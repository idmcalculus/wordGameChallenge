{"version":3,"file":"js/main.280caac6a4e9c9c305f5.js","mappings":"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","sources":["webpack://word-game-challenge/./src/js/modals.js","webpack://word-game-challenge/./src/js/gameUtils.js","webpack://word-game-challenge/./src/js/hintHandler.js","webpack://word-game-challenge/./src/js/WordGame.js","webpack://word-game-challenge/./src/js/uiHandler.js","webpack://word-game-challenge/./src/js/app.js","webpack://word-game-challenge/./src/js/serviceWorkerRegistration.js","webpack://word-game-challenge/./src/js/apiHandler.js"],"sourcesContent":["let alertCallback = null;\r\nlet tryAgainCallback = null;\r\nlet isGameStartAlert = false;\r\n\r\nexport function setupModals() {\r\n  // Alert Modal Elements\r\n  const alertModal = document.getElementById('alertModal');\r\n  const alertMessage = document.getElementById('alertMessage');\r\n  const alertClose = document.querySelector('#alertModal .close');\r\n  const alertResetButton = document.getElementById('alertResetButton');\r\n  const alertTryAgainButton = document.getElementById('alertTryAgainButton');\r\n\r\n  // How to Play Modal Elements\r\n  const howToPlayBtn = document.getElementById('howToPlayBtn');\r\n  const howToPlayModal = document.getElementById('howToPlayModal');\r\n  const howToPlayClose = document.querySelector('#howToPlayModal .close');\r\n\r\n  // Alert Modal Event Listeners\r\n  alertClose.onclick = () => {\r\n    alertModal.style.display = 'none';\r\n    // If this is a game start alert, reset the game when the X is clicked\r\n    if (isGameStartAlert && alertCallback) {\r\n      alertCallback();\r\n      alertCallback = null;\r\n      isGameStartAlert = false;\r\n    }\r\n  };\r\n\r\n  alertTryAgainButton.onclick = () => {\r\n    alertModal.style.display = 'none';\r\n    if (tryAgainCallback) {\r\n      tryAgainCallback();\r\n      tryAgainCallback = null;\r\n    }\r\n  };\r\n\r\n  alertResetButton.onclick = () => {\r\n    alertModal.style.display = 'none';\r\n    if (alertCallback) {\r\n      alertCallback();\r\n      alertCallback = null;\r\n    }\r\n  };\r\n\r\n  // How to Play Modal Event Listeners\r\n  howToPlayBtn.onclick = () => {\r\n    howToPlayModal.style.display = 'flex';\r\n    document.body.style.overflow = 'hidden'; // Prevent background scrolling\r\n  };\r\n\r\n  howToPlayClose.onclick = () => {\r\n    howToPlayModal.style.display = 'none';\r\n    document.body.style.overflow = ''; // Re-enable scrolling\r\n  };\r\n\r\n  // Close modals when clicking outside\r\n  window.onclick = (event) => {\r\n    if (event.target == alertModal) {\r\n      alertModal.style.display = 'none';\r\n      // If this is a game start alert, reset the game when clicking outside\r\n      if (isGameStartAlert && alertCallback) {\r\n        alertCallback();\r\n        alertCallback = null;\r\n        isGameStartAlert = false;\r\n      }\r\n    }\r\n    if (event.target == howToPlayModal) {\r\n      howToPlayModal.style.display = 'none';\r\n      document.body.style.overflow = ''; // Re-enable scrolling\r\n    }\r\n  };\r\n\r\n  // Handle ESC key to close modals\r\n  document.addEventListener('keydown', (event) => {\r\n    if (event.key === 'Escape') {\r\n      if (howToPlayModal.style.display === 'flex') {\r\n        howToPlayModal.style.display = 'none';\r\n        document.body.style.overflow = '';\r\n      }\r\n      if (alertModal.style.display === 'flex') {\r\n        alertModal.style.display = 'none';\r\n        // If this is a game start alert, reset the game when ESC is pressed\r\n        if (isGameStartAlert && alertCallback) {\r\n          alertCallback();\r\n          alertCallback = null;\r\n          isGameStartAlert = false;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function showAlert(message, tryAgainCb, resetCb, isGameStart = false) {\r\n  const alertMessage = document.getElementById('alertMessage');\r\n  const alertModal = document.getElementById('alertModal');\r\n  const alertTryAgainButton = document.getElementById('alertTryAgainButton');\r\n  const alertButtonsContainer = document.querySelector('.alert-buttons');\r\n\r\n  alertMessage.innerHTML = message;\r\n  alertModal.style.display = 'flex';\r\n  alertModal.style.alignItems = 'center';\r\n  alertModal.style.justifyContent = 'center';\r\n  \r\n  // Show/hide Try Again button based on whether a callback was provided\r\n  if (tryAgainCb) {\r\n    alertTryAgainButton.style.display = 'inline-block';\r\n    tryAgainCallback = tryAgainCb;\r\n  } else {\r\n    alertTryAgainButton.style.display = 'none';\r\n    tryAgainCallback = null;\r\n  }\r\n  \r\n  // Set reset callback\r\n  alertCallback = resetCb;\r\n  \r\n  // Set the game start alert flag\r\n  isGameStartAlert = isGameStart;\r\n  \r\n  // Center the Reset Game button when Try Again is hidden\r\n  if (!tryAgainCb && alertButtonsContainer) {\r\n    alertButtonsContainer.style.justifyContent = 'center';\r\n  } else if (alertButtonsContainer) {\r\n    alertButtonsContainer.style.justifyContent = 'space-between';\r\n  }\r\n}","export function startTimer(startTime, timerDisplay) {\r\n  return setInterval(() => {\r\n    const now = new Date();\r\n    const seconds = Math.floor((now - startTime) / 1000);\r\n    timerDisplay.textContent = `Time elapsed: ${seconds} seconds`;\r\n  }, 1000);\r\n}\r\n\r\nexport function stopTimer(timerId) {\r\n  clearInterval(timerId);\r\n}","/**\r\n * Handles hint functionality for the Word Game\r\n */\r\n\r\n// Track which hint type was used on the current row\r\nlet currentRowHintType = null;\r\nlet currentRowNumber = 0;\r\n\r\n/**\r\n * Creates a container for hint buttons\r\n * @param {number} wordLength - Length of the current word\r\n * @param {function} getLetterHint - Function to get a letter hint\r\n * @param {function} getPositionHint - Function to get a position hint\r\n * @param {number} rowCount - Current row count\r\n * @returns {HTMLElement} - The hint buttons container\r\n */\r\nexport function createHintButtonsContainer(wordLength, getLetterHint, getPositionHint, rowCount) {\r\n  const container = document.createElement('div');\r\n  container.classList.add('hint-buttons-container');\r\n  \r\n  // Letter Hint Button (Soft Hint)\r\n  const letterHintButton = document.createElement('button');\r\n  letterHintButton.id = 'letterHintButton';\r\n  letterHintButton.classList.add('hint-button', 'letter-hint');\r\n  letterHintButton.textContent = 'Letter Reveal';\r\n  letterHintButton.dataset.usesLeft = wordLength;\r\n  letterHintButton.dataset.cooldownTime = 0;\r\n  letterHintButton.dataset.hintType = 'letter';\r\n  letterHintButton.title = `Reveals a correct letter (${wordLength} uses available)`;\r\n  \r\n  // Position Hint Button (Hard Hint)\r\n  const positionHintButton = document.createElement('button');\r\n  positionHintButton.id = 'positionHintButton';\r\n  positionHintButton.classList.add('hint-button', 'position-hint');\r\n  positionHintButton.textContent = 'Position Reveal';\r\n  positionHintButton.dataset.usesLeft = 3;\r\n  positionHintButton.dataset.cooldownTime = 0;\r\n  positionHintButton.dataset.hintType = 'position';\r\n  positionHintButton.title = 'Reveals a correct letter in the correct position (3 uses available)';\r\n  \r\n  // Initialize current row tracking\r\n  currentRowNumber = rowCount;\r\n  currentRowHintType = null;\r\n  \r\n  // Add event listeners\r\n  letterHintButton.addEventListener('click', () => {\r\n    if (letterHintButton.disabled) return;\r\n    \r\n    const usesLeft = parseInt(letterHintButton.dataset.usesLeft);\r\n    if (usesLeft <= 0) return;\r\n    \r\n    // Check if we're on a new row\r\n    if (rowCount !== currentRowNumber) {\r\n      // Use the updateCurrentRow function to handle row changes\r\n      updateCurrentRow(rowCount);\r\n    }\r\n    \r\n    // Check if a different hint type was already used on this row\r\n    if (currentRowHintType && currentRowHintType !== 'letter') {\r\n      console.log('Cannot use Letter Reveal - Position Reveal already used on this row');\r\n      alert('Only one type of hint can be used per row. You already used Position Reveal on this row.');\r\n      return;\r\n    }\r\n    \r\n    // Set the current hint type for this row\r\n    currentRowHintType = 'letter';\r\n    \r\n    // Visually disable the other hint button\r\n    const positionButton = document.getElementById('positionHintButton');\r\n    if (positionButton) {\r\n      positionButton.classList.add('inactive-hint');\r\n    }\r\n    \r\n    // Provide the hint\r\n    getLetterHint();\r\n    \r\n    // Update uses left\r\n    letterHintButton.dataset.usesLeft = usesLeft - 1;\r\n    letterHintButton.title = `Reveals a correct letter (${usesLeft - 1} uses left)`;\r\n    \r\n    // Calculate cooldown time (5s, 10s, 15s, etc.)\r\n    const useCount = wordLength - usesLeft + 1;\r\n    const cooldownTime = useCount * 5000; // 5 seconds * use count\r\n    \r\n    // Disable button and start cooldown\r\n    startButtonCooldown(letterHintButton, cooldownTime);\r\n  });\r\n  \r\n  positionHintButton.addEventListener('click', () => {\r\n    if (positionHintButton.disabled) return;\r\n    \r\n    const usesLeft = parseInt(positionHintButton.dataset.usesLeft);\r\n    if (usesLeft <= 0) return;\r\n    \r\n    // Check if we're on a new row\r\n    if (rowCount !== currentRowNumber) {\r\n      // Use the updateCurrentRow function to handle row changes\r\n      updateCurrentRow(rowCount);\r\n    }\r\n    \r\n    // Check if a different hint type was already used on this row\r\n    if (currentRowHintType && currentRowHintType !== 'position') {\r\n      console.log('Cannot use Position Reveal - Letter Reveal already used on this row');\r\n      alert('Only one type of hint can be used per row. You already used Letter Reveal on this row.');\r\n      return;\r\n    }\r\n    \r\n    // Set the current hint type for this row\r\n    currentRowHintType = 'position';\r\n    \r\n    // Visually disable the other hint button\r\n    const letterButton = document.getElementById('letterHintButton');\r\n    if (letterButton) {\r\n      letterButton.classList.add('inactive-hint');\r\n    }\r\n    \r\n    // Provide the hint\r\n    getPositionHint();\r\n    \r\n    // Update uses left\r\n    positionHintButton.dataset.usesLeft = usesLeft - 1;\r\n    positionHintButton.title = `Reveals a correct letter in the correct position (${usesLeft - 1} uses left)`;\r\n    \r\n    // Disable button and start cooldown (60 seconds)\r\n    startButtonCooldown(positionHintButton, 60000);\r\n  });\r\n  \r\n  container.appendChild(letterHintButton);\r\n  container.appendChild(positionHintButton);\r\n  \r\n  return container;\r\n}\r\n\r\n/**\r\n * Starts a cooldown timer for a hint button\r\n * @param {HTMLButtonElement} button - The button to apply cooldown to\r\n * @param {number} cooldownTime - Cooldown time in milliseconds\r\n */\r\nfunction startButtonCooldown(button, cooldownTime) {\r\n  // Disable the button\r\n  button.disabled = true;\r\n  button.classList.add('cooldown');\r\n  \r\n  // Store the cooldown start time and duration\r\n  const startTime = Date.now();\r\n  button.dataset.cooldownStartTime = startTime;\r\n  button.dataset.cooldownTime = cooldownTime;\r\n  \r\n  // Create progress indicator\r\n  const progressIndicator = document.createElement('div');\r\n  progressIndicator.classList.add('cooldown-progress');\r\n  button.appendChild(progressIndicator);\r\n  \r\n  // Update the progress bar every 50ms\r\n  const updateInterval = setInterval(() => {\r\n    const elapsed = Date.now() - startTime;\r\n    const remaining = cooldownTime - elapsed;\r\n    \r\n    if (remaining <= 0) {\r\n      // Cooldown complete\r\n      clearInterval(updateInterval);\r\n      button.disabled = false;\r\n      button.classList.remove('cooldown');\r\n      if (progressIndicator.parentNode === button) {\r\n        button.removeChild(progressIndicator);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    // Update progress bar width\r\n    const progress = (elapsed / cooldownTime) * 100;\r\n    progressIndicator.style.width = `${progress}%`;\r\n  }, 50);\r\n}\r\n\r\n/**\r\n * Resets the hint buttons\r\n */\r\nexport function resetHintButtons() {\r\n  const container = document.querySelector('.hint-buttons-container');\r\n  if (container) {\r\n    container.remove();\r\n  }\r\n  // Reset the row tracking\r\n  currentRowHintType = null;\r\n  currentRowNumber = 0;\r\n}\r\n\r\n/**\r\n * Explicitly resets the visual state of hint buttons\r\n */\r\nexport function resetHintButtonStates() {\r\n  // Reset the current row hint type\r\n  currentRowHintType = null;\r\n  \r\n  // Reset visual state of both buttons\r\n  const letterButton = document.getElementById('letterHintButton');\r\n  const positionButton = document.getElementById('positionHintButton');\r\n  \r\n  if (letterButton) {\r\n    letterButton.classList.remove('inactive-hint');\r\n  }\r\n  \r\n  if (positionButton) {\r\n    positionButton.classList.remove('inactive-hint');\r\n  }\r\n  \r\n  console.log('Hint button states have been reset');\r\n}\r\n\r\n/**\r\n * Updates the current row number for hint tracking\r\n * @param {number} rowNumber - The new row number\r\n */\r\nexport function updateCurrentRow(rowNumber) {\r\n  // If the row number has changed, reset the hint type\r\n  if (rowNumber !== currentRowNumber) {\r\n    currentRowNumber = rowNumber;\r\n    currentRowHintType = null;\r\n    console.log(`Row changed to ${rowNumber}, hint type reset`);\r\n    \r\n    // Reset visual state of both buttons when moving to a new row\r\n    resetHintButtonStates();\r\n  }\r\n}\r\n","import { showAlert } from './modals.js';\r\nimport { startTimer, stopTimer } from './gameUtils.js';\r\nimport { createAlphabetContainer, updateAlphabetContainer, createRow, resetGameUI, updateDifficulty } from './uiHandler.js';\r\nimport { fetchPossibleWords } from './apiHandler.js';\r\nimport { createHintButtonsContainer, resetHintButtons, updateCurrentRow, resetHintButtonStates } from './hintHandler.js';\r\n\r\nclass WordGame {\r\n  /**\r\n   * Provides a hint for a letter that exists in the word (may not be in correct position)\r\n   */\r\n  getLetterHint() {\r\n    if (!this.currentWord || !this.currentRow) return;\r\n    \r\n    // Get all input boxes in the current row\r\n    const inputs = Array.from(this.currentRow.getElementsByTagName('input'));\r\n    \r\n    // Find empty inputs or inputs with incorrect letters\r\n    const availableInputs = inputs.filter((input) => {\r\n      // If input is empty, it's available\r\n      if (!input.value) return true;\r\n      \r\n      // If input has a letter that's not in the word, it's available\r\n      return !this.currentWord.includes(input.value);\r\n    });\r\n    \r\n    if (availableInputs.length === 0) return; // No available inputs\r\n    \r\n    // Choose a random input from available inputs\r\n    const targetInput = availableInputs[Math.floor(Math.random() * availableInputs.length)];\r\n    \r\n    // Get all letters that have been used in any row so far\r\n    const usedLetters = this.getUsedLetters();\r\n    \r\n    // Count occurrences of each letter in the word (case insensitive)\r\n    const letterCounts = {};\r\n    for (const letter of this.currentWord) {\r\n      const lowerLetter = letter.toLowerCase();\r\n      letterCounts[lowerLetter] = (letterCounts[lowerLetter] || 0) + 1;\r\n    }\r\n    \r\n    // Count how many of each letter have already been used\r\n    const usedLetterCounts = {};\r\n    for (const letter of usedLetters) {\r\n      usedLetterCounts[letter] = (usedLetterCounts[letter] || 0) + 1;\r\n    }\r\n    \r\n    console.log('Word letter counts:', letterCounts);\r\n    console.log('Used letter counts:', usedLetterCounts);\r\n    \r\n    // Find available letters that haven't been used yet or have multiple occurrences\r\n    const availableLetters = this.currentWord.split('').filter(letter => {\r\n      const lowerLetter = letter.toLowerCase();\r\n      // If the letter hasn't been used at all, it's available\r\n      if (!usedLetters.includes(lowerLetter)) return true;\r\n      \r\n      // If the letter occurs multiple times in the word and we haven't used all occurrences yet\r\n      const letterCount = letterCounts[lowerLetter] || 0;\r\n      const usedCount = usedLetterCounts[lowerLetter] || 0;\r\n      if (letterCount > usedCount) return true;\r\n      \r\n      // Otherwise, the letter has been fully used\r\n      return false;\r\n    });\r\n    \r\n    console.log('Available letters for hint:', availableLetters);\r\n    \r\n    if (availableLetters.length === 0) return; // No available letters to hint\r\n    \r\n    // Choose a random letter from available letters\r\n    const hintLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\r\n    \r\n    // Set the letter in the input\r\n    targetInput.value = hintLetter;\r\n    \r\n    // Highlight the input to indicate it was a hint\r\n    targetInput.classList.add('hint-provided');\r\n    setTimeout(() => {\r\n      targetInput.classList.remove('hint-provided');\r\n    }, 2000);\r\n  }\r\n  \r\n  /**\r\n   * Provides a hint for a letter in its correct position\r\n   */\r\n  getPositionHint() {\r\n    if (!this.currentWord || !this.currentRow) return;\r\n    \r\n    // Get all input boxes in the current row\r\n    const inputs = Array.from(this.currentRow.getElementsByTagName('input'));\r\n    \r\n    // Get all letters that have been used in any row so far\r\n    const usedLetters = this.getUsedLetters();\r\n    \r\n    // Count occurrences of each letter in the word (case insensitive)\r\n    const letterCounts = {};\r\n    for (const letter of this.currentWord) {\r\n      const lowerLetter = letter.toLowerCase();\r\n      letterCounts[lowerLetter] = (letterCounts[lowerLetter] || 0) + 1;\r\n    }\r\n    \r\n    // Count how many of each letter have already been used\r\n    const usedLetterCounts = {};\r\n    for (const letter of usedLetters) {\r\n      usedLetterCounts[letter] = (usedLetterCounts[letter] || 0) + 1;\r\n    }\r\n    \r\n    console.log('Word letter counts:', letterCounts);\r\n    console.log('Used letter counts:', usedLetterCounts);\r\n    \r\n    // Find positions where the letter is not correctly guessed yet\r\n    // AND the letter hasn't been fully used (unless it occurs multiple times)\r\n    const availablePositions = [];\r\n    \r\n    for (let i = 0; i < this.wordLength; i++) {\r\n      // If position is empty or has wrong letter, it's available\r\n      if (!inputs[i].value || inputs[i].value !== this.currentWord[i]) {\r\n        const letter = this.currentWord[i];\r\n        const lowerLetter = letter.toLowerCase();\r\n        \r\n        // Check if this letter is available to be hinted\r\n        const letterCount = letterCounts[lowerLetter] || 0;\r\n        const usedCount = usedLetterCounts[lowerLetter] || 0;\r\n        \r\n        const letterIsAvailable = \r\n          !usedLetters.includes(lowerLetter) || // Letter hasn't been used at all\r\n          letterCount > usedCount; // Letter occurs multiple times\r\n        \r\n        if (letterIsAvailable) {\r\n          availablePositions.push(i);\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (availablePositions.length === 0) return; // No available positions\r\n    \r\n    // Choose a random position from available positions\r\n    const targetPosition = availablePositions[Math.floor(Math.random() * availablePositions.length)];\r\n    \r\n    // Set the correct letter in that position\r\n    inputs[targetPosition].value = this.currentWord[targetPosition];\r\n    \r\n    // Highlight the input to indicate it was a hint\r\n    inputs[targetPosition].classList.add('hint-provided');\r\n    setTimeout(() => {\r\n      inputs[targetPosition].classList.remove('hint-provided');\r\n    }, 2000);\r\n  }\r\n  /**\r\n   * Gets all letters that have been used in any row so far\r\n   * @returns {Array} Array of used letters\r\n   */\r\n  getUsedLetters() {\r\n    const usedLetters = [];\r\n    \r\n    // Get all inputs in the wrapper (all rows)\r\n    const allInputs = document.querySelectorAll('.wrapper input');\r\n    \r\n    // Check each input's value\r\n    allInputs.forEach(input => {\r\n      if (input.value && input.value.trim() !== '') {\r\n        usedLetters.push(input.value.toLowerCase());\r\n      }\r\n    });\r\n    \r\n    // Add debug logging to see what letters are being tracked\r\n    console.log('Used letters:', usedLetters);\r\n    \r\n    // Log the current state of the game for debugging\r\n    this.logGameState();\r\n    \r\n    return usedLetters;\r\n  }\r\n  \r\n  /**\r\n   * Logs the current state of the game for debugging\r\n   */\r\n  logGameState() {\r\n    console.log('Current word:', this.currentWord);\r\n    console.log('Current row count:', this.rowCount);\r\n    \r\n    // Log all rows and their inputs\r\n    const rows = document.querySelectorAll('.wrapper .row');\r\n    rows.forEach((row, index) => {\r\n      const inputs = Array.from(row.getElementsByTagName('input'));\r\n      const values = inputs.map(input => input.value || '_').join('');\r\n      console.log(`Row ${index + 1}: ${values}`);\r\n    });\r\n  }\r\n  \r\n  constructor() {\r\n    this.possibleWords = [];\r\n    this.alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n    this.currentWord = '';\r\n    this.currentRow = null;\r\n    this.attempts = 0;\r\n    this.rowCount = 0;\r\n    this.maximumAttempts = 5;\r\n    this.wordLength = '';\r\n    this.startTime = null;\r\n    this.timerDisplay = null;\r\n    this.timerId = null;\r\n    this.highScores = JSON.parse(localStorage.getItem('highScores')) || [];\r\n    this.currentScorePage = 0;\r\n    this.scoresPerPage = 5;\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    // Add input validation for the word length input\r\n    const wordLengthInput = document.getElementById('wordLengthInput');\r\n    \r\n    // Set a default value\r\n    wordLengthInput.value = 3;\r\n    \r\n    // Add event listener to validate input on blur (when focus leaves the input)\r\n    // This allows users to delete and type freely while editing\r\n    wordLengthInput.addEventListener('blur', function() {\r\n      // Only validate when the input loses focus\r\n      let value = parseInt(this.value);\r\n      \r\n      if (isNaN(value)) {\r\n        // If not a number, reset to default\r\n        this.value = 3;\r\n      } else if (value < 3) {\r\n        // If less than minimum, set to minimum\r\n        this.value = 3;\r\n      } else if (value > 10) {\r\n        // If greater than maximum, set to maximum\r\n        this.value = 10;\r\n      }\r\n    });\r\n    \r\n    // Also validate on keyup for better UX\r\n    wordLengthInput.addEventListener('keyup', function(e) {\r\n      // Allow empty field during editing\r\n      if (this.value === '') return;\r\n      \r\n      // Allow backspace and delete keys without immediate validation\r\n      if (e.key === 'Backspace' || e.key === 'Delete') return;\r\n      \r\n      const value = parseInt(this.value);\r\n      \r\n      // Only enforce max limit during typing\r\n      if (value > 10) {\r\n        this.value = 10;\r\n      }\r\n    });\r\n    \r\n    document.getElementById('startGame').addEventListener('click', () => {\r\n      this.displayHighScores();\r\n      this.play();\r\n    });\r\n\r\n    document.getElementById('resetGame').addEventListener('click', () => {\r\n      this.resetGame();\r\n    });\r\n  }\r\n\r\n  async play() {\r\n    console.log('play game has been called');\r\n\r\n    // Start the timer\r\n    this.startTime = new Date();\r\n    this.timerDisplay = document.getElementById('timerDisplay');\r\n    this.timerId = startTimer(this.startTime, this.timerDisplay);\r\n\r\n    // Disable the start game button and word length input\r\n    document.getElementById('startGame').disabled = true;\r\n    document.getElementById('wordLengthInput').disabled = true;\r\n    document.getElementById('resetGame').style.display = 'block';\r\n\r\n    // Get and validate word length\r\n    const wordLengthInput = document.getElementById('wordLengthInput').value;\r\n    this.wordLength = parseInt(wordLengthInput);\r\n        \r\n    if (isNaN(this.wordLength) || this.wordLength < 3 || this.wordLength > 10) {\r\n      // For game start page, show only the Reset Game button with styled alert\r\n      // Pass true as the fourth parameter to indicate this is a game start alert\r\n      showAlert(`<div class=\"failure-alert\">\r\n        <span class=\"alert-icon\">⚠️</span>\r\n        <h3>Invalid Input</h3>\r\n        <p>Please enter a valid number between 3 and 10</p>\r\n      </div>`, null, () => {\r\n        this.resetGame();\r\n      }, true);\r\n      return;\r\n    }\r\n\r\n    updateDifficulty(this.wordLength);\r\n\r\n    // Generate a pattern for words with at most wordLength letters\r\n    const pattern = '?'.repeat(this.wordLength);\r\n\r\n    // Fetch possible words and initialize the game\r\n    try {\r\n      this.possibleWords = await fetchPossibleWords(pattern, this.wordLength);\r\n      this.currentWord = this.possibleWords[Math.floor(Math.random() * this.possibleWords.length)];\r\n      // console.log(this.currentWord);\r\n      \r\n      // Initialize the alphabet container after we have a word\r\n      this.createAlphabetContainer();\r\n      \r\n      // Show the alphabet container with !important override\r\n      const container = document.getElementById('alphabetContainer');\r\n      container.setAttribute('style', 'display: grid !important');\r\n      \r\n      this.createRow();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      document.getElementById('startGame').disabled = false;\r\n      document.getElementById('wordLengthInput').disabled = false;\r\n    }\r\n\r\n    // Update game header\r\n    document.getElementById('gameHeader').innerHTML = `Find the ${this.wordLength} letter word ...`;\r\n    \r\n    // Add hint buttons above the Reset Game button\r\n    const hintContainer = createHintButtonsContainer(\r\n      this.wordLength, \r\n      this.getLetterHint.bind(this), \r\n      this.getPositionHint.bind(this),\r\n      this.rowCount\r\n    );\r\n    \r\n    // Insert before the Reset Game button\r\n    const resetButton = document.getElementById('resetGame');\r\n    resetButton.parentNode.insertBefore(hintContainer, resetButton);\r\n\r\n    this.rowCount = 0;\r\n  }\r\n\r\n  createAlphabetContainer() {\r\n    createAlphabetContainer(this.alphabet);\r\n  }\r\n\r\n  updateAlphabetContainer(guessedLetter, letterClass) {\r\n    // Show the alphabet container when the first guess is made\r\n    const container = document.getElementById('alphabetContainer');\r\n    if (container.style.display === 'none' || container.style.display === '') {\r\n      container.style.display = 'grid';\r\n    }\r\n    \r\n    updateAlphabetContainer(guessedLetter, letterClass, this.alphabet);\r\n  }\r\n\r\n  createRow() {\r\n    this.currentRow = createRow(this.wordLength, this.checkRowLetters.bind(this));\r\n    document.querySelector('.wrapper').appendChild(this.currentRow);\r\n    this.rowCount++;\r\n    this.currentRow.firstChild.focus();\r\n\r\n    console.log('Row created:', this.rowCount);\r\n    \r\n    // Explicitly reset the hint button states for the new row\r\n    resetHintButtonStates();\r\n    \r\n    // Update the current row in the hint handler to track which hint type was used\r\n    updateCurrentRow(this.rowCount);\r\n        \r\n    // Hint buttons are now added once below the wrapper in the play method\r\n  }\r\n\r\n  async checkRowLetters() {\r\n    console.log('Check row letters called on row ' + this.currentRow.id);\r\n    if (!this.testIsRowComplete()) {\r\n      return;\r\n    }\r\n    \r\n    // Get the entered word from the current row\r\n    const inputs = Array.from(this.currentRow.getElementsByTagName('input'));\r\n    const enteredWord = inputs.map(input => input.value).join('');\r\n    \r\n    // Import validateWord function\r\n    const { validateWord } = await import('./apiHandler.js');\r\n    \r\n    // Check if the entered word is a valid English word\r\n    const isValidWord = await validateWord(enteredWord);\r\n    \r\n    if (!isValidWord) {\r\n      // Create try again callback - clears only the current row\r\n      const tryAgainCallback = () => {\r\n        // Clear the inputs in the current row\r\n        inputs.forEach(input => {\r\n          input.value = '';\r\n          input.classList.remove('correct', 'contains', 'notContains');\r\n        });\r\n        // Focus on the first input\r\n        inputs[0].focus();\r\n      };\r\n      \r\n      // Reset game callback - resets the entire game\r\n      const resetGameCallback = () => {\r\n        this.resetGame();\r\n      };\r\n      \r\n      // Show an alert with both Try Again and Reset Game buttons\r\n      showAlert(`<div class=\"invalid-word-alert\">\r\n        <span class=\"alert-icon\">⚠️</span>\r\n        <h3>Invalid Word</h3>\r\n        <p>\"${enteredWord}\" is not a valid English word.</p>\r\n        <p>Please try again with a valid word.</p>\r\n      </div>`, tryAgainCallback, resetGameCallback);\r\n      return;\r\n    }\r\n    \r\n    const letterStates = {};         // Track the state of each letter in each position (correct, contains, notContains)\r\n    const wordLetterCounts = {};    // Track remaining occurrences of each letter in the target word\r\n    const alphabetLetterStates = {}; // Track the best state for each letter in the alphabet\r\n    \r\n    // Initialize wordLetterCounts with the frequency of each letter in the current word\r\n    for (const letter of this.currentWord) {\r\n      wordLetterCounts[letter] = (wordLetterCounts[letter] || 0) + 1;\r\n    }\r\n    \r\n    let totalCorrect = 0; // Counter for correctly guessed letters\r\n    \r\n    // First Pass: Mark correct letters and track remaining occurrences\r\n    for (let i = 0; i < this.wordLength; i++) {\r\n      let inputBox = this.currentRow.children[i];\r\n      let enteredLetter = inputBox.value;\r\n      let correctLetter = this.currentWord[i];\r\n    \r\n      if (enteredLetter === correctLetter) {\r\n        inputBox.classList.add('correct'); // Visually mark as correct\r\n        letterStates[i] = 'correct'; // Track this position as correct\r\n        // Track this as the best state for this letter in the alphabet\r\n        alphabetLetterStates[enteredLetter] = 'correct';\r\n        totalCorrect++; // Increment total correct count\r\n        wordLetterCounts[enteredLetter]--; // Decrement remaining count in the word\r\n      }\r\n    }\r\n    \r\n    // Second Pass: Handle misplaced and not contained letters\r\n    for (let i = 0; i < this.wordLength; i++) {\r\n      let inputBox = this.currentRow.children[i];\r\n      let enteredLetter = inputBox.value;\r\n    \r\n      // Skip positions already marked as correct\r\n      if (letterStates[i] === 'correct') {\r\n        continue;\r\n      }\r\n      \r\n      // Check if the letter exists in the word and we haven't used all occurrences yet\r\n      if (this.currentWord.includes(enteredLetter) && wordLetterCounts[enteredLetter] > 0) {\r\n        inputBox.classList.add('contains');\r\n        letterStates[i] = 'contains';\r\n        // Only update alphabet state if we don't already have a better state (correct)\r\n        if (!alphabetLetterStates[enteredLetter] || alphabetLetterStates[enteredLetter] !== 'correct') {\r\n          alphabetLetterStates[enteredLetter] = 'contains';\r\n        }\r\n        wordLetterCounts[enteredLetter]--; // Decrement remaining count in the word\r\n      } else {\r\n        // Either the letter is not in the word at all, or all occurrences have been accounted for\r\n        inputBox.classList.add('notContains');\r\n        letterStates[i] = 'notContains';\r\n        // Only update alphabet state if we don't already have a better state (correct or contains)\r\n        if (!alphabetLetterStates[enteredLetter] && \r\n            (!this.currentWord.includes(enteredLetter) || \r\n             alphabetLetterStates[enteredLetter] !== 'contains')) {\r\n          alphabetLetterStates[enteredLetter] = 'notContains';\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Update the alphabet container with the best state for each letter\r\n    for (const [letter, state] of Object.entries(alphabetLetterStates)) {\r\n      this.updateAlphabetContainer(letter, state);\r\n    }\r\n    \r\n    Array.from(this.currentRow.children).forEach(input => input.disabled = true); // Disable inputs after checking\r\n    \r\n    // Game logic:\r\n    setTimeout(() => {\r\n      if (totalCorrect === this.wordLength) {\r\n        this.gameWon(); // Player guessed the word correctly\r\n      } else if ((this.rowCount + 1) >= this.maximumAttempts) {\r\n        this.gameLost(); // Player ran out of attempts\r\n      } else {\r\n        // Reset hint button states before creating a new row\r\n        resetHintButtonStates();\r\n        this.createRow(); // Create a new row for the next guess\r\n      }\r\n    }, 100); // Add a slight delay for visual feedback\r\n  }\r\n\r\n  testIsRowComplete() {\r\n    console.log('Test row complete called on row ' + this.currentRow.id);\r\n    if (!this.currentRow) {\r\n      return false;\r\n    }\r\n\r\n    // Check if all inputs have values\r\n    return Array.from(this.currentRow.getElementsByTagName('input')).every(input => input.value);\r\n  }\r\n\r\n  gameWon() {\r\n    console.log(`Game won! player found the word (which was ${this.currentWord})`);\r\n\r\n    stopTimer(this.timerId);\r\n\r\n    const timeTaken = Math.floor((new Date() - this.startTime) / 1000);\r\n        \r\n    // Add score with timestamp and word info\r\n    this.highScores.push({\r\n      score: timeTaken,\r\n      word: this.currentWord,\r\n      wordLength: this.wordLength,\r\n      attempts: this.rowCount + 1,\r\n      date: new Date().toISOString()\r\n    });\r\n        \r\n    // Sort all scores by time, then attempts, then date (most recent first)\r\n    this.highScores.sort((a, b) => {\r\n      // Handle both new format (object) and old format (number)\r\n      const scoreA = typeof a === 'object' ? a.score : a;\r\n      const scoreB = typeof b === 'object' ? b.score : b;\r\n      \r\n      // First sort by time (ascending)\r\n      if (scoreA !== scoreB) {\r\n        return scoreA - scoreB;\r\n      }\r\n      \r\n      // If times are equal and both are objects with attempts, sort by attempts (ascending)\r\n      if (typeof a === 'object' && typeof b === 'object' && 'attempts' in a && 'attempts' in b) {\r\n        if (a.attempts !== b.attempts) {\r\n          return a.attempts - b.attempts;\r\n        }\r\n        \r\n        // If attempts are also equal, sort by date (most recent first)\r\n        if ('date' in a && 'date' in b) {\r\n          return new Date(b.date) - new Date(a.date);\r\n        }\r\n      }\r\n      \r\n      return 0; // Equal ranking if we can't determine further ordering\r\n    });\r\n\r\n    localStorage.setItem('highScores', JSON.stringify(this.highScores));\r\n\r\n    // Reset to first page when adding a new score\r\n    this.currentScorePage = 0;\r\n    this.displayHighScores();\r\n\r\n    // For game won, only show the Reset Game button (null for tryAgainCallback)\r\n    showAlert(`<div class=\"success-alert\">\r\n      <span class=\"alert-icon\">🎉</span>\r\n      <h3>Congratulations!</h3>\r\n      <p>Well done! You solved it in ${timeTaken} seconds with ${this.rowCount + 1} attempts.</p>\r\n      <p>The word was: <strong>${this.currentWord}</strong></p>\r\n    </div>`, null, () => {\r\n      this.resetGame();\r\n    });\r\n  }\r\n\r\n  gameLost() {\r\n    console.log(`Game Lost! Maximum attempts reached for guessing the word: ${this.currentWord}`);\r\n\r\n    stopTimer(this.timerId);\r\n\r\n    // For game lost, show both Try Again and Reset Game buttons\r\n    showAlert(`<div class=\"failure-alert\">\r\n      <span class=\"alert-icon\">😕</span>\r\n      <h3>Game Over</h3>\r\n      <p>Sorry, you've reached the maximum number of attempts.</p>\r\n      <p>The word was: <strong>${this.currentWord}</strong></p>\r\n    </div>`, null, () => {\r\n      this.resetGame();\r\n    });\r\n  }\r\n\r\n  displayHighScores() {\r\n    const highScoresList = document.getElementById('highScoresList');\r\n    highScoresList.innerHTML = '<h3 class=\"highScoresHeader\"> Scores </h3>';\r\n\r\n    // Display all scores in the scrollable container\r\n    const totalScores = this.highScores.length;\r\n    \r\n    // Display all scores\r\n    for (let i = 0; i < totalScores; i++) {\r\n      const scoreData = this.highScores[i];\r\n      let listItem = document.createElement('li');\r\n            \r\n      // Handle both new format (object) and old format (number)\r\n      if (typeof scoreData === 'object') {\r\n        // Show both time and attempts\r\n        listItem.innerHTML = `<span class=\"score-rank\">#${\r\n          i + 1\r\n        }:</span> <span class=\"score-time\">${\r\n          scoreData.score\r\n        } seconds</span> <span class=\"score-attempts\">(${\r\n          scoreData.attempts\r\n        } attempts)</span> <span class=\"score-wordlength\">(Word length: ${\r\n          scoreData.wordLength\r\n        })</span>`;\r\n        \r\n        // Add tooltip with additional info\r\n        listItem.title = `Word: ${scoreData.word}, Length: ${scoreData.wordLength}`;\r\n      } else {\r\n        // Legacy format - just show time\r\n        listItem.textContent = `#${i + 1}: ${scoreData} seconds`;\r\n      }\r\n            \r\n      highScoresList.appendChild(listItem);\r\n    }\r\n\r\n    highScoresList.style.display = 'block';\r\n  }\r\n\r\n  resetGame() {\r\n    resetGameUI();\r\n    resetHintButtons();\r\n    this.rowCount = 0;\r\n    this.currentWord = '';\r\n    this.wordLength = '';\r\n    this.possibleWords = [];\r\n    this.timerDisplay.style.display = 'none';\r\n  }\r\n}\r\n\r\nexport default WordGame;","export function createAlphabetContainer(alphabet) {\r\n  const container = document.getElementById('alphabetContainer');\r\n  container.innerHTML = '';  // Clear container\r\n  \r\n  // Add a title/label above the grid to clarify its purpose\r\n  const label = document.createElement('div');\r\n  label.classList.add('alphabet-label');\r\n  label.textContent = 'Letter Status';\r\n  container.appendChild(label);\r\n  \r\n  // Create a grid container for the letters\r\n  const gridContainer = document.createElement('div');\r\n  gridContainer.classList.add('alphabet-grid');\r\n  \r\n  // Create a more balanced layout\r\n  // First 3 rows with 7 letters each (21 letters)\r\n  const firstThreeRows = alphabet.slice(0, 21);\r\n  // Last row with 5 letters, centered\r\n  const lastRow = alphabet.slice(21);\r\n  \r\n  // Add first three rows (7 letters each)\r\n  firstThreeRows.forEach(letter => {\r\n    const span = document.createElement('span');\r\n    span.textContent = letter;\r\n    span.classList.add('notGuessed');\r\n    span.setAttribute('aria-label', `Letter ${letter}, not yet guessed`);\r\n    gridContainer.appendChild(span);\r\n  });\r\n  \r\n  // Add spacer for centering last row if needed\r\n  if (lastRow.length < 7) {\r\n    const spacersNeeded = Math.floor((7 - lastRow.length) / 2);\r\n    \r\n    // Add left spacers\r\n    for (let i = 0; i < spacersNeeded; i++) {\r\n      const spacer = document.createElement('div');\r\n      spacer.classList.add('letter-spacer');\r\n      gridContainer.appendChild(spacer);\r\n    }\r\n    \r\n    // Add the remaining letters\r\n    lastRow.forEach(letter => {\r\n      const span = document.createElement('span');\r\n      span.textContent = letter;\r\n      span.classList.add('notGuessed');\r\n      span.setAttribute('aria-label', `Letter ${letter}, not yet guessed`);\r\n      gridContainer.appendChild(span);\r\n    });\r\n    \r\n    // Add right spacers\r\n    for (let i = 0; i < spacersNeeded; i++) {\r\n      const spacer = document.createElement('div');\r\n      spacer.classList.add('letter-spacer');\r\n      gridContainer.appendChild(spacer);\r\n    }\r\n  }\r\n  \r\n  container.appendChild(gridContainer);\r\n  // Don't display the container yet - it will be shown after the first guess\r\n  container.style.display = 'none';\r\n}\r\n\r\nexport function updateAlphabetContainer(guessedLetter, letterClass, alphabet) {\r\n  const container = document.getElementById('alphabetContainer');\r\n  \r\n  // Show the container if it's not already visible\r\n  if (container.style.display === 'none') {\r\n    container.style.display = 'grid';\r\n  }\r\n  \r\n  // Find the letter in the grid container by text content instead of position\r\n  const letterElements = document.querySelectorAll('#alphabetContainer .alphabet-grid span');\r\n  let letterElement = null;\r\n  \r\n  // Find the element with matching text content\r\n  for (const element of letterElements) {\r\n    if (element.textContent.toUpperCase() === guessedLetter.toUpperCase()) {\r\n      letterElement = element;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  if (!letterElement) return; // Safety check\r\n  \r\n  letterElement.className = ''; // Remove all classes\r\n  letterElement.classList.add(letterClass);\r\n  \r\n  // Update the aria-label for accessibility\r\n  let status = 'unknown';\r\n  if (letterClass === 'correct') {\r\n    status = 'correct, in the right position';\r\n  } else if (letterClass === 'contains') {\r\n    status = 'in the word but wrong position';\r\n  } else if (letterClass === 'notContains') {\r\n    status = 'not in the word';\r\n  }\r\n  \r\n  letterElement.setAttribute('aria-label', `Letter ${guessedLetter}, ${status}`);\r\n}\r\n\r\nexport function createRow(wordLength, checkRowLetters) {\r\n  const newRow = document.createElement('div');\r\n  newRow.classList.add('wordRow');\r\n  newRow.id = 'row_' + Math.random().toString(36).substr(2, 9);\r\n\r\n  for (let i = 0; i < wordLength; i++) {\r\n    let newInputBox = document.createElement('input');\r\n    newInputBox.type = 'text';\r\n    newInputBox.classList.add('wordLetterBox');\r\n    newInputBox.maxLength = 1;\r\n    newInputBox.autocomplete = 'off';\r\n    newInputBox.autocorrect = 'off';\r\n    newInputBox.autocapitalize = 'off';\r\n    newInputBox.spellcheck = false;\r\n\r\n    // Handle input events for letter entry\r\n    newInputBox.addEventListener('input', (event) => {\r\n      // Normalize the input to lowercase\r\n      if (newInputBox.value) {\r\n        newInputBox.value = newInputBox.value.toLowerCase();\r\n      }\r\n            \r\n      // Validate the input is a letter\r\n      if (!newInputBox.value.match(/^[a-z]$/i)) {\r\n        newInputBox.value = ''; // clear the box if not a letter\r\n        return;\r\n      }\r\n\r\n      // Move focus to next input after valid entry\r\n      if (newInputBox.value && i < wordLength - 1) {\r\n        // Small timeout to ensure the focus change works on mobile\r\n        setTimeout(() => {\r\n          newRow.children[i + 1].focus();\r\n        }, 10);\r\n      }\r\n            \r\n      // Check if the row is complete\r\n      checkRowLetters();\r\n    });\r\n\r\n    // Handle keyboard navigation\r\n    newInputBox.addEventListener('keydown', (event) => {\r\n      // Backspace to previous input\r\n      if (event.key === 'Backspace' && i > 0 && newInputBox.value === '') {\r\n        newRow.children[i - 1].value = '';\r\n        newRow.children[i - 1].focus();\r\n        event.preventDefault();\r\n      }\r\n            \r\n      // Arrow key navigation\r\n      if (event.key === 'ArrowLeft' && i > 0) {\r\n        newRow.children[i - 1].focus();\r\n        event.preventDefault();\r\n      }\r\n      if (event.key === 'ArrowRight' && i < wordLength - 1) {\r\n        newRow.children[i + 1].focus();\r\n        event.preventDefault();\r\n      }\r\n    });\r\n        \r\n    // Touch-specific handling for mobile\r\n    newInputBox.addEventListener('touchend', (e) => {\r\n      // Prevent zoom on double-tap\r\n      e.preventDefault();\r\n      newInputBox.focus();\r\n    });\r\n\r\n    newRow.appendChild(newInputBox);\r\n  }\r\n\r\n  return newRow;\r\n}\r\n\r\nexport function resetGameUI() {\r\n  document.getElementById('wrapper').innerHTML = '';\r\n  document.getElementById('startGame').disabled = false;\r\n  document.getElementById('wordLengthInput').disabled = false;\r\n  document.getElementById('wordLengthInput').value = '';\r\n  document.getElementById('alphabetContainer').innerHTML = '';\r\n  document.getElementById('alphabetContainer').style.display = 'none';\r\n  document.getElementById('difficulty').style.display = 'none';\r\n  document.getElementById('resetGame').style.display = 'none';\r\n}\r\n\r\nexport function updateDifficulty(wordLength) {\r\n  const difficulty = document.getElementById('difficulty');\r\n  if (wordLength <= 4) {\r\n    difficulty.innerHTML = 'Difficulty: Easy';\r\n  } else if (wordLength <= 6) {\r\n    difficulty.innerHTML = 'Difficulty: Medium';\r\n  } else if (wordLength <= 8) {\r\n    difficulty.innerHTML = 'Difficulty: Hard';\r\n  } else {\r\n    difficulty.innerHTML = 'Difficulty: Very Hard';\r\n  }\r\n  difficulty.style.display = 'block';\r\n}","import '../scss/main.scss';\r\nimport WordGame from './WordGame.js';\r\nimport { setupModals } from './modals.js';\r\nimport { registerServiceWorker } from './serviceWorkerRegistration.js';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  setupModals();\r\n  const game = new WordGame();\r\n});\r\n\r\n// Register service worker for offline functionality\r\nregisterServiceWorker();\r\n","/**\r\n * Register the service worker for production builds\r\n */\r\nexport function registerServiceWorker() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      navigator.serviceWorker.register('/service-worker.js')\r\n        .then(registration => {\r\n          console.log('SW registered: ', registration);\r\n        })\r\n        .catch(registrationError => {\r\n          console.log('SW registration failed: ', registrationError);\r\n        });\r\n    });\r\n  }\r\n}\r\n","// API configuration from environment variables\r\nconst API_URL = process.env.API_URL || 'https://api.datamuse.com';\r\nconst API_TIMEOUT = parseInt(process.env.API_TIMEOUT || '5000');\r\n\r\n/**\r\n * Fetches possible words matching the given pattern and length\r\n * @param {string} pattern - The pattern to match (e.g., '?????' for a 5-letter word)\r\n * @param {number} wordLength - The length of words to return\r\n * @returns {Promise<string[]>} - Array of matching words\r\n */\r\nexport async function fetchPossibleWords(pattern, wordLength) {\r\n  try {\r\n    // Create AbortController for timeout handling\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\r\n    \r\n    // Fetch words that match our pattern and are common enough\r\n    const response = await fetch(`${API_URL}/words?sp=${pattern}&md=f&max=100`, {\r\n      signal: controller.signal\r\n    });\r\n    \r\n    // Clear the timeout\r\n    clearTimeout(timeoutId);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Network response error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Filter words: must be exact length and have frequency score > 0.5\r\n    const words = data\r\n      .filter(wordObj => {\r\n        const freq = parseFloat(wordObj.tags?.[0]?.slice(2)) || 0; // freq tags look like 'f:1.23'\r\n        return wordObj.word.length === wordLength && freq > 0.5;\r\n      })\r\n      .map(wordObj => wordObj.word.toLowerCase());\r\n\r\n    if (words.length === 0) {\r\n      throw new Error(`No common words of length ${wordLength} found.`);\r\n    }\r\n\r\n    return words;\r\n  } catch (error) {\r\n    console.error('Error fetching words:', error);\r\n    throw new Error(`Failed to fetch words: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates if a word is a valid English word using Datamuse API\r\n * @param {string} word - The word to validate\r\n * @returns {Promise<boolean>} - True if the word is valid, false otherwise\r\n */\r\nexport async function validateWord(word) {\r\n  if (!word || word.trim() === '') {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Create AbortController for timeout handling\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\r\n    \r\n    // First try Datamuse API with exact spelling\r\n    const response = await fetch(`${API_URL}/words?sp=${word.toLowerCase()}&md=f&max=1`, {\r\n      signal: controller.signal\r\n    });\r\n    \r\n    // Clear the timeout\r\n    clearTimeout(timeoutId);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Network response error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // If we found an exact match with the same spelling, it's a valid word\r\n    if (data.length > 0 && data[0].word.toLowerCase() === word.toLowerCase()) {\r\n      return true;\r\n    }\r\n    \r\n    // If no exact match found with Datamuse, try backup validation with Free Dictionary API\r\n    return await validateWordWithFreeDictionary(word);\r\n    \r\n  } catch (error) {\r\n    console.error('Error validating word with Datamuse:', error);\r\n    // Fallback to Free Dictionary API if Datamuse fails\r\n    return await validateWordWithFreeDictionary(word);\r\n  }\r\n}\r\n\r\n/**\r\n * Backup validation using Free Dictionary API\r\n * @param {string} word - The word to validate\r\n * @returns {Promise<boolean>} - True if the word is valid, false otherwise\r\n */\r\nasync function validateWordWithFreeDictionary(word) {\r\n  try {\r\n    // Create AbortController for timeout handling\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\r\n    \r\n    // Free Dictionary API returns 404 for non-existent words\r\n    const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word.toLowerCase()}`, {\r\n      signal: controller.signal\r\n    });\r\n    \r\n    // Clear the timeout\r\n    clearTimeout(timeoutId);\r\n    \r\n    // If response is OK, the word exists\r\n    return response.ok;\r\n    \r\n  } catch (error) {\r\n    console.error('Error validating word with Free Dictionary API:', error);\r\n    // If both APIs fail, we'll assume the word is valid to avoid blocking gameplay\r\n    return true;\r\n  }\r\n}\r\n"],"names":["alertCallback","tryAgainCallback","isGameStartAlert","showAlert","message","tryAgainCb","resetCb","isGameStart","arguments","length","undefined","alertMessage","document","getElementById","alertModal","alertTryAgainButton","alertButtonsContainer","querySelector","innerHTML","style","display","alignItems","justifyContent","startTimer","startTime","timerDisplay","setInterval","now","Date","seconds","Math","floor","textContent","concat","stopTimer","timerId","clearInterval","currentRowHintType","currentRowNumber","createHintButtonsContainer","wordLength","getLetterHint","getPositionHint","rowCount","container","createElement","classList","add","letterHintButton","id","dataset","usesLeft","cooldownTime","hintType","title","positionHintButton","addEventListener","disabled","parseInt","updateCurrentRow","console","log","alert","positionButton","startButtonCooldown","letterButton","appendChild","button","cooldownStartTime","progressIndicator","updateInterval","elapsed","remove","parentNode","removeChild","progress","width","resetHintButtonStates","rowNumber","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","WordGame","_classCallCheck","this","possibleWords","alphabet","split","currentWord","currentRow","attempts","maximumAttempts","highScores","JSON","parse","localStorage","getItem","currentScorePage","scoresPerPage","init","_this","availableInputs","getElementsByTagName","filter","input","includes","_step","targetInput","random","usedLetters","getUsedLetters","letterCounts","_iterator","lowerLetter","toLowerCase","err","_step2","usedLetterCounts","_iterator2","letter","availableLetters","hintLetter","setTimeout","_step3","inputs","_iterator3","_step4","_iterator4","availablePositions","letterCount","usedCount","targetPosition","querySelectorAll","trim","logGameState","row","index","map","join","_this2","wordLengthInput","displayHighScores","play","resetGame","_play","_callee","pattern","hintContainer","resetButton","_this3","_context","difficulty","repeat","fetchPossibleWords","createAlphabetContainer","setAttribute","createRow","t0","error","bind","insertBefore","label","gridContainer","firstThreeRows","lastRow","span","spacersNeeded","spacer","guessedLetter","letterClass","letterElement","element","toUpperCase","className","status","updateAlphabetContainer","checkRowLetters","newRow","substr","_loop","newInputBox","maxLength","autocomplete","autocorrect","autocapitalize","spellcheck","event","match","children","focus","preventDefault","firstChild","_checkRowLetters","_callee2","enteredWord","_yield$import","validateWord","resetGameCallback","letterStates","wordLetterCounts","alphabetLetterStates","_iterator5","_step5","_letter4","totalCorrect","inputBox","enteredLetter","correctLetter","_i","_inputBox","_enteredLetter","_i2","_Object$entries","_Object$entries$_i","state","_this4","_context2","testIsRowComplete","entries","_slicedToArray","gameWon","gameLost","every","_this5","timeTaken","score","word","date","toISOString","sort","b","scoreA","scoreB","setItem","stringify","_this6","highScoresList","totalScores","scoreData","listItem","alertClose","alertResetButton","howToPlayBtn","howToPlayModal","howToPlayClose","onclick","body","overflow","window","target","navigator","serviceWorker","register","registration","registrationError","API_URL","process","API_TIMEOUT","_x","_x2","_fetchPossibleWords","controller","timeoutId","response","data","words","AbortController","abort","fetch","signal","clearTimeout","ok","json","wordObj","_wordObj$tags","freq","parseFloat","tags","_x3","_validateWord","validateWordWithFreeDictionary","_x4","_validateWordWithFreeDictionary","_callee3","_context3"],"sourceRoot":""}