"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkword_game_challenge"] = self["webpackChunkword_game_challenge"] || []).push([["game-logic"],{

/***/ 948:
/*!****************************!*\
  !*** ./src/js/WordGame.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals.js */ 116);\n/* harmony import */ var _gameUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameUtils.js */ 647);\n/* harmony import */ var _uiHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./uiHandler.js */ 702);\n/* harmony import */ var _apiHandler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./apiHandler.js */ 706);\n/* harmony import */ var _hintHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hintHandler.js */ 347);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\nvar WordGame = /*#__PURE__*/function () {\n  function WordGame() {\n    _classCallCheck(this, WordGame);\n    this.possibleWords = [];\n    this.alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    this.currentWord = '';\n    this.currentRow = null;\n    this.attempts = 0;\n    this.rowCount = 0;\n    this.maximumAttempts = 5;\n    this.wordLength = '';\n    this.startTime = null;\n    this.timerDisplay = null;\n    this.timerId = null;\n    this.highScores = JSON.parse(localStorage.getItem('highScores')) || [];\n    this.currentScorePage = 0;\n    this.scoresPerPage = 5;\n    this.init();\n  }\n  return _createClass(WordGame, [{\n    key: \"getLetterHint\",\n    value:\n    /**\n     * Provides a hint for a letter that exists in the word (may not be in correct position)\n     */\n    function getLetterHint() {\n      var _this = this;\n      if (!this.currentWord || !this.currentRow) return;\n\n      // Get all input boxes in the current row\n      var inputs = Array.from(this.currentRow.getElementsByTagName('input'));\n\n      // Find empty inputs or inputs with incorrect letters\n      var availableInputs = inputs.filter(function (input) {\n        // If input is empty, it's available\n        if (!input.value) return true;\n\n        // If input has a letter that's not in the word, it's available\n        return !_this.currentWord.includes(input.value);\n      });\n      if (availableInputs.length === 0) return; // No available inputs\n\n      // Choose a random input from available inputs\n      var targetInput = availableInputs[Math.floor(Math.random() * availableInputs.length)];\n\n      // Find a letter from the word that hasn't been correctly guessed yet\n      var wordLetters = this.currentWord.split('');\n\n      // Filter out letters that are already correctly placed\n      var availableLetters = wordLetters.filter(function (letter, idx) {\n        // If the letter is already correctly guessed in its position, exclude it\n        if (inputs[idx] && inputs[idx].value === letter) return false;\n\n        // Otherwise include it as an available hint letter\n        return true;\n      });\n      if (availableLetters.length === 0) return; // No available letters to hint\n\n      // Choose a random letter from available letters\n      var hintLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n\n      // Set the letter in the input\n      targetInput.value = hintLetter;\n\n      // Highlight the input to indicate it was a hint\n      targetInput.classList.add('hint-provided');\n      setTimeout(function () {\n        targetInput.classList.remove('hint-provided');\n      }, 2000);\n    }\n\n    /**\n     * Provides a hint for a letter in its correct position\n     */\n  }, {\n    key: \"getPositionHint\",\n    value: function getPositionHint() {\n      if (!this.currentWord || !this.currentRow) return;\n\n      // Get all input boxes in the current row\n      var inputs = Array.from(this.currentRow.getElementsByTagName('input'));\n\n      // Find positions where the letter is not correctly guessed yet\n      var availablePositions = [];\n      for (var i = 0; i < this.wordLength; i++) {\n        // If position is empty or has wrong letter, it's available\n        if (!inputs[i].value || inputs[i].value !== this.currentWord[i]) {\n          availablePositions.push(i);\n        }\n      }\n      if (availablePositions.length === 0) return; // No available positions\n\n      // Choose a random position from available positions\n      var targetPosition = availablePositions[Math.floor(Math.random() * availablePositions.length)];\n\n      // Set the correct letter in that position\n      inputs[targetPosition].value = this.currentWord[targetPosition];\n\n      // Highlight the input to indicate it was a hint\n      inputs[targetPosition].classList.add('hint-provided');\n      setTimeout(function () {\n        inputs[targetPosition].classList.remove('hint-provided');\n      }, 2000);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      document.getElementById('startGame').addEventListener('click', function () {\n        _this2.displayHighScores();\n        _this2.play();\n      });\n      document.getElementById('resetGame').addEventListener('click', function () {\n        _this2.resetGame();\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this3 = this;\n        var wordLengthInput, pattern;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              console.log('play game has been called');\n\n              // Start the timer\n              this.startTime = new Date();\n              this.timerDisplay = document.getElementById('timerDisplay');\n              this.timerId = (0,_gameUtils_js__WEBPACK_IMPORTED_MODULE_1__.startTimer)(this.startTime, this.timerDisplay);\n              this.createAlphabetContainer();\n\n              // Disable the start game button and word length input\n              document.getElementById('startGame').disabled = true;\n              document.getElementById('wordLengthInput').disabled = true;\n              document.getElementById('resetGame').style.display = 'block';\n\n              // Get and validate word length\n              wordLengthInput = document.getElementById('wordLengthInput').value;\n              this.wordLength = parseInt(wordLengthInput);\n              if (!(isNaN(this.wordLength) || this.wordLength < 3 || this.wordLength > 10)) {\n                _context.next = 13;\n                break;\n              }\n              (0,_modals_js__WEBPACK_IMPORTED_MODULE_0__.showAlert)('Please enter a valid number between 3 and 10', function () {\n                _this3.resetGame();\n              });\n              return _context.abrupt(\"return\");\n            case 13:\n              (0,_uiHandler_js__WEBPACK_IMPORTED_MODULE_2__.updateDifficulty)(this.wordLength);\n\n              // Generate a pattern for words with at most wordLength letters\n              pattern = '?'.repeat(this.wordLength); // Fetch possible words and initialize the game\n              _context.prev = 15;\n              _context.next = 18;\n              return (0,_apiHandler_js__WEBPACK_IMPORTED_MODULE_3__.fetchPossibleWords)(pattern, this.wordLength);\n            case 18:\n              this.possibleWords = _context.sent;\n              this.currentWord = this.possibleWords[Math.floor(Math.random() * this.possibleWords.length)];\n              // console.log(this.currentWord);\n              this.createRow();\n              _context.next = 28;\n              break;\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](15);\n              console.error('Error:', _context.t0);\n              document.getElementById('startGame').disabled = false;\n              document.getElementById('wordLengthInput').disabled = false;\n            case 28:\n              // Update game header\n              document.getElementById('gameHeader').innerHTML = \"Find the \".concat(this.wordLength, \" letter word ...\");\n              this.rowCount = 0;\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[15, 23]]);\n      }));\n      function play() {\n        return _play.apply(this, arguments);\n      }\n      return play;\n    }()\n  }, {\n    key: \"createAlphabetContainer\",\n    value: function createAlphabetContainer() {\n      (0,_uiHandler_js__WEBPACK_IMPORTED_MODULE_2__.createAlphabetContainer)(this.alphabet);\n    }\n  }, {\n    key: \"updateAlphabetContainer\",\n    value: function updateAlphabetContainer(guessedLetter, letterClass) {\n      (0,_uiHandler_js__WEBPACK_IMPORTED_MODULE_2__.updateAlphabetContainer)(guessedLetter, letterClass, this.alphabet);\n    }\n  }, {\n    key: \"createRow\",\n    value: function createRow() {\n      this.currentRow = (0,_uiHandler_js__WEBPACK_IMPORTED_MODULE_2__.createRow)(this.wordLength, this.checkRowLetters.bind(this));\n      document.querySelector('.wrapper').appendChild(this.currentRow);\n      this.rowCount++;\n      this.currentRow.firstChild.focus();\n\n      // Add hint buttons after the current row if this is the first row\n      if (this.rowCount === 1) {\n        var hintContainer = (0,_hintHandler_js__WEBPACK_IMPORTED_MODULE_4__.createHintButtonsContainer)(this.wordLength, this.getLetterHint.bind(this), this.getPositionHint.bind(this));\n        document.querySelector('.wrapper').appendChild(hintContainer);\n      }\n    }\n  }, {\n    key: \"checkRowLetters\",\n    value: function checkRowLetters() {\n      var _this4 = this;\n      console.log('Check row letters called on row ' + this.currentRow.id);\n      if (!this.testIsRowComplete()) {\n        return;\n      }\n      var letterStates = {}; // Track the state of each letter (correct, contains, notContains)\n      var wordLetterCounts = {}; // Track remaining occurrences of each letter in the target word\n\n      // Initialize wordLetterCounts with the frequency of each letter in the current word\n      var _iterator = _createForOfIteratorHelper(this.currentWord),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var letter = _step.value;\n          wordLetterCounts[letter] = (wordLetterCounts[letter] || 0) + 1;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var totalCorrect = 0; // Counter for correctly guessed letters\n\n      // First Pass: Mark correct letters and track remaining occurrences\n      for (var i = 0; i < this.wordLength; i++) {\n        var inputBox = this.currentRow.children[i];\n        var enteredLetter = inputBox.value;\n        var correctLetter = this.currentWord[i];\n        if (enteredLetter === correctLetter) {\n          inputBox.classList.add('correct'); // Visually mark as correct\n          this.updateAlphabetContainer(enteredLetter, 'correct'); // Update letter keyboard\n          letterStates[enteredLetter] = 'correct';\n          totalCorrect++; // Increment total correct count\n          wordLetterCounts[enteredLetter]--; // Decrement remaining count in the word\n        } else {\n          letterStates[enteredLetter] = (letterStates[enteredLetter] || 0) + 1; // Increment count for misplaced letter\n        }\n      }\n\n      // Second Pass: Handle misplaced and not contained letters\n      for (var _i = 0; _i < this.wordLength; _i++) {\n        var _inputBox = this.currentRow.children[_i];\n        var _enteredLetter = _inputBox.value;\n        if (letterStates[_enteredLetter] === 'correct') {\n          continue; // Letter is already marked as correct, so skip it\n        } else if (this.currentWord.includes(_enteredLetter) && wordLetterCounts[_enteredLetter] > 0) {\n          _inputBox.classList.add('contains');\n          this.updateAlphabetContainer(_enteredLetter, 'contains');\n          wordLetterCounts[_enteredLetter]--; // Decrement remaining count in the word\n        } else {\n          _inputBox.classList.add('notContains');\n          this.updateAlphabetContainer(_enteredLetter, 'notContains');\n        }\n      }\n      Array.from(this.currentRow.children).forEach(function (input) {\n        return input.disabled = true;\n      }); // Disable inputs after checking\n\n      // Game logic:\n      setTimeout(function () {\n        if (totalCorrect === _this4.wordLength) {\n          _this4.gameWon(); // Player guessed the word correctly\n        } else if (_this4.rowCount + 1 >= _this4.maximumAttempts) {\n          _this4.gameLost(); // Player ran out of attempts\n        } else {\n          _this4.createRow(); // Create a new row for the next guess\n        }\n      }, 100); // Add a slight delay for visual feedback\n    }\n  }, {\n    key: \"testIsRowComplete\",\n    value: function testIsRowComplete() {\n      console.log('Test row complete called on row ' + this.currentRow.id);\n      if (!this.currentRow) {\n        return false;\n      }\n      return Array.from(this.currentRow.getElementsByTagName('input')).every(function (input) {\n        return input.value;\n      });\n    }\n  }, {\n    key: \"gameWon\",\n    value: function gameWon() {\n      var _this5 = this;\n      console.log(\"Game won! player found the word (which was \".concat(this.currentWord, \")\"));\n      (0,_gameUtils_js__WEBPACK_IMPORTED_MODULE_1__.stopTimer)(this.timerId);\n      var timeTaken = Math.floor((new Date() - this.startTime) / 1000);\n\n      // Add score with timestamp and word info\n      this.highScores.push({\n        score: timeTaken,\n        word: this.currentWord,\n        wordLength: this.wordLength,\n        attempts: this.rowCount + 1,\n        date: new Date().toISOString()\n      });\n\n      // Sort all scores by time (ascending)\n      this.highScores.sort(function (a, b) {\n        // Handle both new format (object) and old format (number)\n        var scoreA = _typeof(a) === 'object' ? a.score : a;\n        var scoreB = _typeof(b) === 'object' ? b.score : b;\n        return scoreA - scoreB;\n      });\n      localStorage.setItem('highScores', JSON.stringify(this.highScores));\n\n      // Reset to first page when adding a new score\n      this.currentScorePage = 0;\n      this.displayHighScores();\n      (0,_modals_js__WEBPACK_IMPORTED_MODULE_0__.showAlert)(\"Well done! You solved it in \".concat(this.rowCount + 1, \" attempts. The word was \").concat(this.currentWord), function () {\n        _this5.resetGame();\n      });\n    }\n  }, {\n    key: \"gameLost\",\n    value: function gameLost() {\n      var _this6 = this;\n      console.log(\"Game Lost! Maximum attempts reached for guessing the word: \".concat(this.currentWord));\n      (0,_gameUtils_js__WEBPACK_IMPORTED_MODULE_1__.stopTimer)(this.timerId);\n      (0,_modals_js__WEBPACK_IMPORTED_MODULE_0__.showAlert)(\"Sorry, you've reached the maximum number of attempts. The word was: \".concat(this.currentWord), function () {\n        _this6.resetGame();\n      });\n    }\n  }, {\n    key: \"displayHighScores\",\n    value: function displayHighScores() {\n      var _this7 = this;\n      var highScoresList = document.getElementById('highScoresList');\n      highScoresList.innerHTML = '<h3 class=\"highScoresHeader\"> High Scores </h3>';\n\n      // Calculate total pages\n      var totalScores = this.highScores.length;\n      var totalPages = Math.ceil(totalScores / this.scoresPerPage);\n\n      // Ensure current page is valid\n      if (this.currentScorePage >= totalPages) {\n        this.currentScorePage = Math.max(0, totalPages - 1);\n      }\n\n      // Calculate start and end indices for current page\n      var startIdx = this.currentScorePage * this.scoresPerPage;\n      var endIdx = Math.min(startIdx + this.scoresPerPage, totalScores);\n\n      // Display scores for current page\n      for (var i = startIdx; i < endIdx; i++) {\n        var scoreData = this.highScores[i];\n        var listItem = document.createElement('li');\n\n        // Handle both new format (object) and old format (number)\n        if (_typeof(scoreData) === 'object') {\n          listItem.textContent = \"#\".concat(i + 1, \": \").concat(scoreData.score, \" seconds\");\n          // Add tooltip with additional info\n          listItem.title = \"Word: \".concat(scoreData.word, \", Length: \").concat(scoreData.wordLength, \", Attempts: \").concat(scoreData.attempts);\n        } else {\n          listItem.textContent = \"#\".concat(i + 1, \": \").concat(scoreData, \" seconds\");\n        }\n        highScoresList.appendChild(listItem);\n      }\n\n      // Add navigation controls if there are multiple pages\n      if (totalPages > 1) {\n        var navContainer = document.createElement('div');\n        navContainer.className = 'scores-nav';\n\n        // Previous button\n        var prevBtn = document.createElement('button');\n        prevBtn.textContent = '← Prev';\n        prevBtn.disabled = this.currentScorePage === 0;\n        prevBtn.addEventListener('click', function () {\n          if (_this7.currentScorePage > 0) {\n            _this7.currentScorePage--;\n            _this7.displayHighScores();\n          }\n        });\n\n        // Page indicator\n        var pageIndicator = document.createElement('span');\n        pageIndicator.textContent = \"Page \".concat(this.currentScorePage + 1, \" of \").concat(totalPages);\n        pageIndicator.className = 'page-indicator';\n\n        // Next button\n        var nextBtn = document.createElement('button');\n        nextBtn.textContent = 'Next →';\n        nextBtn.disabled = this.currentScorePage >= totalPages - 1;\n        nextBtn.addEventListener('click', function () {\n          if (_this7.currentScorePage < totalPages - 1) {\n            _this7.currentScorePage++;\n            _this7.displayHighScores();\n          }\n        });\n        navContainer.appendChild(prevBtn);\n        navContainer.appendChild(pageIndicator);\n        navContainer.appendChild(nextBtn);\n        highScoresList.appendChild(navContainer);\n      }\n      highScoresList.style.display = 'block';\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      (0,_uiHandler_js__WEBPACK_IMPORTED_MODULE_2__.resetGameUI)();\n      (0,_hintHandler_js__WEBPACK_IMPORTED_MODULE_4__.resetHintButtons)();\n      this.rowCount = 0;\n      this.currentWord = '';\n      this.wordLength = '';\n      this.possibleWords = [];\n      this.timerDisplay.style.display = 'none';\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WordGame);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///948\n");

/***/ })

}]);