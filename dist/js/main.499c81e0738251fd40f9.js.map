{"version":3,"file":"js/main.499c81e0738251fd40f9.js","mappings":"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","sources":["webpack://word-game-challenge/./src/js/modals.js","webpack://word-game-challenge/./src/js/gameUtils.js","webpack://word-game-challenge/./src/js/apiHandler.js","webpack://word-game-challenge/./src/js/hintHandler.js","webpack://word-game-challenge/./src/js/WordGame.js","webpack://word-game-challenge/./src/js/uiHandler.js","webpack://word-game-challenge/./src/js/app.js","webpack://word-game-challenge/./src/js/serviceWorkerRegistration.js"],"sourcesContent":["let alertCallback = null;\n\nexport function setupModals() {\n  // Alert Modal Elements\n  const alertModal = document.getElementById('alertModal');\n  const alertMessage = document.getElementById('alertMessage');\n  const alertClose = document.querySelector('#alertModal .close');\n  const alertResetButton = document.getElementById('alertResetButton');\n\n  // How to Play Modal Elements\n  const howToPlayBtn = document.getElementById('howToPlayBtn');\n  const howToPlayModal = document.getElementById('howToPlayModal');\n  const howToPlayClose = document.querySelector('#howToPlayModal .close');\n\n  // Alert Modal Event Listeners\n  alertClose.onclick = () => {\n    alertModal.style.display = 'none';\n  };\n\n  alertResetButton.onclick = () => {\n    alertModal.style.display = 'none';\n    if (alertCallback) {\n      alertCallback();\n      alertCallback = null;\n    }\n  };\n\n  // How to Play Modal Event Listeners\n  howToPlayBtn.onclick = () => {\n    howToPlayModal.style.display = 'flex';\n    document.body.style.overflow = 'hidden'; // Prevent background scrolling\n  };\n\n  howToPlayClose.onclick = () => {\n    howToPlayModal.style.display = 'none';\n    document.body.style.overflow = ''; // Re-enable scrolling\n  };\n\n  // Close modals when clicking outside\n  window.onclick = (event) => {\n    if (event.target == alertModal) {\n      alertModal.style.display = 'none';\n    }\n    if (event.target == howToPlayModal) {\n      howToPlayModal.style.display = 'none';\n      document.body.style.overflow = ''; // Re-enable scrolling\n    }\n  };\n\n  // Handle ESC key to close modals\n  document.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape') {\n      if (howToPlayModal.style.display === 'flex') {\n        howToPlayModal.style.display = 'none';\n        document.body.style.overflow = '';\n      }\n      if (alertModal.style.display === 'flex') {\n        alertModal.style.display = 'none';\n      }\n    }\n  });\n}\n\nexport function showAlert(message, callback) {\n  const alertMessage = document.getElementById('alertMessage');\n  const alertModal = document.getElementById('alertModal');\n\n  alertMessage.innerHTML = message;\n  alertModal.style.display = 'flex';\n  alertModal.style.alignItems = 'center';\n  alertModal.style.justifyContent = 'center';\n  alertCallback = callback;\n}","export function startTimer(startTime, timerDisplay) {\n  return setInterval(() => {\n    const now = new Date();\n    const seconds = Math.floor((now - startTime) / 1000);\n    timerDisplay.textContent = `Time elapsed: ${seconds} seconds`;\n  }, 1000);\n}\n\nexport function stopTimer(timerId) {\n  clearInterval(timerId);\n}","// API configuration from environment variables\nconst API_URL = process.env.API_URL || 'https://api.datamuse.com';\nconst API_TIMEOUT = parseInt(process.env.API_TIMEOUT || '5000');\n\n/**\n * Fetches possible words matching the given pattern and length\n * @param {string} pattern - The pattern to match (e.g., '?????' for a 5-letter word)\n * @param {number} wordLength - The length of words to return\n * @returns {Promise<string[]>} - Array of matching words\n */\nexport async function fetchPossibleWords(pattern, wordLength) {\n  try {\n    // Create AbortController for timeout handling\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    \n    // Fetch words that match our pattern and are common enough\n    const response = await fetch(`${API_URL}/words?sp=${pattern}&md=f&max=100`, {\n      signal: controller.signal\n    });\n    \n    // Clear the timeout\n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`Network response error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    // Filter words: must be exact length and have frequency score > 0.5\n    const words = data\n      .filter(wordObj => {\n        const freq = parseFloat(wordObj.tags?.[0]?.slice(2)) || 0; // freq tags look like 'f:1.23'\n        return wordObj.word.length === wordLength && freq > 0.5;\n      })\n      .map(wordObj => wordObj.word.toLowerCase());\n\n    if (words.length === 0) {\n      throw new Error(`No common words of length ${wordLength} found.`);\n    }\n\n    return words;\n  } catch (error) {\n    console.error('Error fetching words:', error);\n    throw new Error(`Failed to fetch words: ${error.message}`);\n  }\n}\n","/**\n * Handles hint functionality for the Word Game\n */\n\n// Track which hint type was used on the current row\nlet currentRowHintType = null;\nlet currentRowNumber = 0;\n\n/**\n * Creates a container for hint buttons\n * @param {number} wordLength - Length of the current word\n * @param {function} getLetterHint - Function to get a letter hint\n * @param {function} getPositionHint - Function to get a position hint\n * @param {number} rowCount - Current row count\n * @returns {HTMLElement} - The hint buttons container\n */\nexport function createHintButtonsContainer(wordLength, getLetterHint, getPositionHint, rowCount) {\n  const container = document.createElement('div');\n  container.classList.add('hint-buttons-container');\n  \n  // Letter Hint Button (Soft Hint)\n  const letterHintButton = document.createElement('button');\n  letterHintButton.id = 'letterHintButton';\n  letterHintButton.classList.add('hint-button', 'letter-hint');\n  letterHintButton.textContent = 'Letter Reveal';\n  letterHintButton.dataset.usesLeft = wordLength;\n  letterHintButton.dataset.cooldownTime = 0;\n  letterHintButton.dataset.hintType = 'letter';\n  letterHintButton.title = `Reveals a correct letter (${wordLength} uses available)`;\n  \n  // Position Hint Button (Hard Hint)\n  const positionHintButton = document.createElement('button');\n  positionHintButton.id = 'positionHintButton';\n  positionHintButton.classList.add('hint-button', 'position-hint');\n  positionHintButton.textContent = 'Position Reveal';\n  positionHintButton.dataset.usesLeft = 3;\n  positionHintButton.dataset.cooldownTime = 0;\n  positionHintButton.dataset.hintType = 'position';\n  positionHintButton.title = 'Reveals a correct letter in the correct position (3 uses available)';\n  \n  // Initialize current row tracking\n  currentRowNumber = rowCount;\n  currentRowHintType = null;\n  \n  // Add event listeners\n  letterHintButton.addEventListener('click', () => {\n    if (letterHintButton.disabled) return;\n    \n    const usesLeft = parseInt(letterHintButton.dataset.usesLeft);\n    if (usesLeft <= 0) return;\n    \n    // Check if we're on a new row\n    if (rowCount !== currentRowNumber) {\n      // Use the updateCurrentRow function to handle row changes\n      updateCurrentRow(rowCount);\n    }\n    \n    // Check if a different hint type was already used on this row\n    if (currentRowHintType && currentRowHintType !== 'letter') {\n      console.log('Cannot use Letter Reveal - Position Reveal already used on this row');\n      alert('Only one type of hint can be used per row. You already used Position Reveal on this row.');\n      return;\n    }\n    \n    // Set the current hint type for this row\n    currentRowHintType = 'letter';\n    \n    // Visually disable the other hint button\n    const positionButton = document.getElementById('positionHintButton');\n    if (positionButton) {\n      positionButton.classList.add('inactive-hint');\n    }\n    \n    // Provide the hint\n    getLetterHint();\n    \n    // Update uses left\n    letterHintButton.dataset.usesLeft = usesLeft - 1;\n    letterHintButton.title = `Reveals a correct letter (${usesLeft - 1} uses left)`;\n    \n    // Calculate cooldown time (5s, 10s, 15s, etc.)\n    const useCount = wordLength - usesLeft + 1;\n    const cooldownTime = useCount * 5000; // 5 seconds * use count\n    \n    // Disable button and start cooldown\n    startButtonCooldown(letterHintButton, cooldownTime);\n  });\n  \n  positionHintButton.addEventListener('click', () => {\n    if (positionHintButton.disabled) return;\n    \n    const usesLeft = parseInt(positionHintButton.dataset.usesLeft);\n    if (usesLeft <= 0) return;\n    \n    // Check if we're on a new row\n    if (rowCount !== currentRowNumber) {\n      // Use the updateCurrentRow function to handle row changes\n      updateCurrentRow(rowCount);\n    }\n    \n    // Check if a different hint type was already used on this row\n    if (currentRowHintType && currentRowHintType !== 'position') {\n      console.log('Cannot use Position Reveal - Letter Reveal already used on this row');\n      alert('Only one type of hint can be used per row. You already used Letter Reveal on this row.');\n      return;\n    }\n    \n    // Set the current hint type for this row\n    currentRowHintType = 'position';\n    \n    // Visually disable the other hint button\n    const letterButton = document.getElementById('letterHintButton');\n    if (letterButton) {\n      letterButton.classList.add('inactive-hint');\n    }\n    \n    // Provide the hint\n    getPositionHint();\n    \n    // Update uses left\n    positionHintButton.dataset.usesLeft = usesLeft - 1;\n    positionHintButton.title = `Reveals a correct letter in the correct position (${usesLeft - 1} uses left)`;\n    \n    // Disable button and start cooldown (60 seconds)\n    startButtonCooldown(positionHintButton, 60000);\n  });\n  \n  container.appendChild(letterHintButton);\n  container.appendChild(positionHintButton);\n  \n  return container;\n}\n\n/**\n * Starts a cooldown timer for a hint button\n * @param {HTMLButtonElement} button - The button to apply cooldown to\n * @param {number} cooldownTime - Cooldown time in milliseconds\n */\nfunction startButtonCooldown(button, cooldownTime) {\n  // Disable the button\n  button.disabled = true;\n  button.classList.add('cooldown');\n  \n  // Store the cooldown start time and duration\n  const startTime = Date.now();\n  button.dataset.cooldownStartTime = startTime;\n  button.dataset.cooldownTime = cooldownTime;\n  \n  // Create progress indicator\n  const progressIndicator = document.createElement('div');\n  progressIndicator.classList.add('cooldown-progress');\n  button.appendChild(progressIndicator);\n  \n  // Update the progress bar every 50ms\n  const updateInterval = setInterval(() => {\n    const elapsed = Date.now() - startTime;\n    const remaining = cooldownTime - elapsed;\n    \n    if (remaining <= 0) {\n      // Cooldown complete\n      clearInterval(updateInterval);\n      button.disabled = false;\n      button.classList.remove('cooldown');\n      if (progressIndicator.parentNode === button) {\n        button.removeChild(progressIndicator);\n      }\n      return;\n    }\n    \n    // Update progress bar width\n    const progress = (elapsed / cooldownTime) * 100;\n    progressIndicator.style.width = `${progress}%`;\n  }, 50);\n}\n\n/**\n * Resets the hint buttons\n */\nexport function resetHintButtons() {\n  const container = document.querySelector('.hint-buttons-container');\n  if (container) {\n    container.remove();\n  }\n  // Reset the row tracking\n  currentRowHintType = null;\n  currentRowNumber = 0;\n}\n\n/**\n * Explicitly resets the visual state of hint buttons\n */\nexport function resetHintButtonStates() {\n  // Reset the current row hint type\n  currentRowHintType = null;\n  \n  // Reset visual state of both buttons\n  const letterButton = document.getElementById('letterHintButton');\n  const positionButton = document.getElementById('positionHintButton');\n  \n  if (letterButton) {\n    letterButton.classList.remove('inactive-hint');\n  }\n  \n  if (positionButton) {\n    positionButton.classList.remove('inactive-hint');\n  }\n  \n  console.log('Hint button states have been reset');\n}\n\n/**\n * Updates the current row number for hint tracking\n * @param {number} rowNumber - The new row number\n */\nexport function updateCurrentRow(rowNumber) {\n  // If the row number has changed, reset the hint type\n  if (rowNumber !== currentRowNumber) {\n    currentRowNumber = rowNumber;\n    currentRowHintType = null;\n    console.log(`Row changed to ${rowNumber}, hint type reset`);\n    \n    // Reset visual state of both buttons when moving to a new row\n    resetHintButtonStates();\n  }\n}\n","import { showAlert } from './modals.js';\nimport { startTimer, stopTimer } from './gameUtils.js';\nimport { createAlphabetContainer, updateAlphabetContainer, createRow, resetGameUI, updateDifficulty } from './uiHandler.js';\nimport { fetchPossibleWords } from './apiHandler.js';\nimport { createHintButtonsContainer, resetHintButtons, updateCurrentRow, resetHintButtonStates } from './hintHandler.js';\n\nclass WordGame {\n  /**\n   * Provides a hint for a letter that exists in the word (may not be in correct position)\n   */\n  getLetterHint() {\n    if (!this.currentWord || !this.currentRow) return;\n    \n    // Get all input boxes in the current row\n    const inputs = Array.from(this.currentRow.getElementsByTagName('input'));\n    \n    // Find empty inputs or inputs with incorrect letters\n    const availableInputs = inputs.filter((input) => {\n      // If input is empty, it's available\n      if (!input.value) return true;\n      \n      // If input has a letter that's not in the word, it's available\n      return !this.currentWord.includes(input.value);\n    });\n    \n    if (availableInputs.length === 0) return; // No available inputs\n    \n    // Choose a random input from available inputs\n    const targetInput = availableInputs[Math.floor(Math.random() * availableInputs.length)];\n    \n    // Get all letters that have been used in any row so far\n    const usedLetters = this.getUsedLetters();\n    \n    // Count occurrences of each letter in the word (case insensitive)\n    const letterCounts = {};\n    for (const letter of this.currentWord) {\n      const lowerLetter = letter.toLowerCase();\n      letterCounts[lowerLetter] = (letterCounts[lowerLetter] || 0) + 1;\n    }\n    \n    // Count how many of each letter have already been used\n    const usedLetterCounts = {};\n    for (const letter of usedLetters) {\n      usedLetterCounts[letter] = (usedLetterCounts[letter] || 0) + 1;\n    }\n    \n    console.log('Word letter counts:', letterCounts);\n    console.log('Used letter counts:', usedLetterCounts);\n    \n    // Find available letters that haven't been used yet or have multiple occurrences\n    const availableLetters = this.currentWord.split('').filter(letter => {\n      const lowerLetter = letter.toLowerCase();\n      // If the letter hasn't been used at all, it's available\n      if (!usedLetters.includes(lowerLetter)) return true;\n      \n      // If the letter occurs multiple times in the word and we haven't used all occurrences yet\n      const letterCount = letterCounts[lowerLetter] || 0;\n      const usedCount = usedLetterCounts[lowerLetter] || 0;\n      if (letterCount > usedCount) return true;\n      \n      // Otherwise, the letter has been fully used\n      return false;\n    });\n    \n    console.log('Available letters for hint:', availableLetters);\n    \n    if (availableLetters.length === 0) return; // No available letters to hint\n    \n    // Choose a random letter from available letters\n    const hintLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    \n    // Set the letter in the input\n    targetInput.value = hintLetter;\n    \n    // Highlight the input to indicate it was a hint\n    targetInput.classList.add('hint-provided');\n    setTimeout(() => {\n      targetInput.classList.remove('hint-provided');\n    }, 2000);\n  }\n  \n  /**\n   * Provides a hint for a letter in its correct position\n   */\n  getPositionHint() {\n    if (!this.currentWord || !this.currentRow) return;\n    \n    // Get all input boxes in the current row\n    const inputs = Array.from(this.currentRow.getElementsByTagName('input'));\n    \n    // Get all letters that have been used in any row so far\n    const usedLetters = this.getUsedLetters();\n    \n    // Count occurrences of each letter in the word (case insensitive)\n    const letterCounts = {};\n    for (const letter of this.currentWord) {\n      const lowerLetter = letter.toLowerCase();\n      letterCounts[lowerLetter] = (letterCounts[lowerLetter] || 0) + 1;\n    }\n    \n    // Count how many of each letter have already been used\n    const usedLetterCounts = {};\n    for (const letter of usedLetters) {\n      usedLetterCounts[letter] = (usedLetterCounts[letter] || 0) + 1;\n    }\n    \n    console.log('Word letter counts:', letterCounts);\n    console.log('Used letter counts:', usedLetterCounts);\n    \n    // Find positions where the letter is not correctly guessed yet\n    // AND the letter hasn't been fully used (unless it occurs multiple times)\n    const availablePositions = [];\n    \n    for (let i = 0; i < this.wordLength; i++) {\n      // If position is empty or has wrong letter, it's available\n      if (!inputs[i].value || inputs[i].value !== this.currentWord[i]) {\n        const letter = this.currentWord[i];\n        const lowerLetter = letter.toLowerCase();\n        \n        // Check if this letter is available to be hinted\n        const letterCount = letterCounts[lowerLetter] || 0;\n        const usedCount = usedLetterCounts[lowerLetter] || 0;\n        \n        const letterIsAvailable = \n          !usedLetters.includes(lowerLetter) || // Letter hasn't been used at all\n          letterCount > usedCount; // Letter occurs multiple times\n        \n        if (letterIsAvailable) {\n          availablePositions.push(i);\n        }\n      }\n    }\n    \n    if (availablePositions.length === 0) return; // No available positions\n    \n    // Choose a random position from available positions\n    const targetPosition = availablePositions[Math.floor(Math.random() * availablePositions.length)];\n    \n    // Set the correct letter in that position\n    inputs[targetPosition].value = this.currentWord[targetPosition];\n    \n    // Highlight the input to indicate it was a hint\n    inputs[targetPosition].classList.add('hint-provided');\n    setTimeout(() => {\n      inputs[targetPosition].classList.remove('hint-provided');\n    }, 2000);\n  }\n  /**\n   * Gets all letters that have been used in any row so far\n   * @returns {Array} Array of used letters\n   */\n  getUsedLetters() {\n    const usedLetters = [];\n    \n    // Get all inputs in the wrapper (all rows)\n    const allInputs = document.querySelectorAll('.wrapper input');\n    \n    // Check each input's value\n    allInputs.forEach(input => {\n      if (input.value && input.value.trim() !== '') {\n        usedLetters.push(input.value.toLowerCase());\n      }\n    });\n    \n    // Add debug logging to see what letters are being tracked\n    console.log('Used letters:', usedLetters);\n    \n    // Log the current state of the game for debugging\n    this.logGameState();\n    \n    return usedLetters;\n  }\n  \n  /**\n   * Logs the current state of the game for debugging\n   */\n  logGameState() {\n    console.log('Current word:', this.currentWord);\n    console.log('Current row count:', this.rowCount);\n    \n    // Log all rows and their inputs\n    const rows = document.querySelectorAll('.wrapper .row');\n    rows.forEach((row, index) => {\n      const inputs = Array.from(row.getElementsByTagName('input'));\n      const values = inputs.map(input => input.value || '_').join('');\n      console.log(`Row ${index + 1}: ${values}`);\n    });\n  }\n  \n  constructor() {\n    this.possibleWords = [];\n    this.alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    this.currentWord = '';\n    this.currentRow = null;\n    this.attempts = 0;\n    this.rowCount = 0;\n    this.maximumAttempts = 5;\n    this.wordLength = '';\n    this.startTime = null;\n    this.timerDisplay = null;\n    this.timerId = null;\n    this.highScores = JSON.parse(localStorage.getItem('highScores')) || [];\n    this.currentScorePage = 0;\n    this.scoresPerPage = 5;\n\n    this.init();\n  }\n\n  init() {\n    // Add input validation for the word length input\n    const wordLengthInput = document.getElementById('wordLengthInput');\n    \n    // Set a default value\n    wordLengthInput.value = 3;\n    \n    // Add event listener to validate input on blur (when focus leaves the input)\n    // This allows users to delete and type freely while editing\n    wordLengthInput.addEventListener('blur', function() {\n      // Only validate when the input loses focus\n      let value = parseInt(this.value);\n      \n      if (isNaN(value)) {\n        // If not a number, reset to default\n        this.value = 3;\n      } else if (value < 3) {\n        // If less than minimum, set to minimum\n        this.value = 3;\n      } else if (value > 10) {\n        // If greater than maximum, set to maximum\n        this.value = 10;\n      }\n    });\n    \n    // Also validate on keyup for better UX\n    wordLengthInput.addEventListener('keyup', function(e) {\n      // Allow empty field during editing\n      if (this.value === '') return;\n      \n      // Allow backspace and delete keys without immediate validation\n      if (e.key === 'Backspace' || e.key === 'Delete') return;\n      \n      const value = parseInt(this.value);\n      \n      // Only enforce max limit during typing\n      if (value > 10) {\n        this.value = 10;\n      }\n    });\n    \n    document.getElementById('startGame').addEventListener('click', () => {\n      this.displayHighScores();\n      this.play();\n    });\n\n    document.getElementById('resetGame').addEventListener('click', () => {\n      this.resetGame();\n    });\n  }\n\n  async play() {\n    console.log('play game has been called');\n\n    // Start the timer\n    this.startTime = new Date();\n    this.timerDisplay = document.getElementById('timerDisplay');\n    this.timerId = startTimer(this.startTime, this.timerDisplay);\n\n    // Disable the start game button and word length input\n    document.getElementById('startGame').disabled = true;\n    document.getElementById('wordLengthInput').disabled = true;\n    document.getElementById('resetGame').style.display = 'block';\n\n    // Get and validate word length\n    const wordLengthInput = document.getElementById('wordLengthInput').value;\n    this.wordLength = parseInt(wordLengthInput);\n        \n    if (isNaN(this.wordLength) || this.wordLength < 3 || this.wordLength > 10) {\n      showAlert('Please enter a valid number between 3 and 10', () => {\n        this.resetGame();\n      });\n      return;\n    }\n\n    updateDifficulty(this.wordLength);\n\n    // Generate a pattern for words with at most wordLength letters\n    const pattern = '?'.repeat(this.wordLength);\n\n    // Fetch possible words and initialize the game\n    try {\n      this.possibleWords = await fetchPossibleWords(pattern, this.wordLength);\n      this.currentWord = this.possibleWords[Math.floor(Math.random() * this.possibleWords.length)];\n      // console.log(this.currentWord);\n      \n      // Initialize the alphabet container after we have a word\n      this.createAlphabetContainer();\n      \n      // Show the alphabet container with !important override\n      const container = document.getElementById('alphabetContainer');\n      container.setAttribute('style', 'display: grid !important');\n      \n      this.createRow();\n    } catch (error) {\n      console.error('Error:', error);\n      document.getElementById('startGame').disabled = false;\n      document.getElementById('wordLengthInput').disabled = false;\n    }\n\n    // Update game header\n    document.getElementById('gameHeader').innerHTML = `Find the ${this.wordLength} letter word ...`;\n    \n    // Add hint buttons above the Reset Game button\n    const hintContainer = createHintButtonsContainer(\n      this.wordLength, \n      this.getLetterHint.bind(this), \n      this.getPositionHint.bind(this),\n      this.rowCount\n    );\n    \n    // Insert before the Reset Game button\n    const resetButton = document.getElementById('resetGame');\n    resetButton.parentNode.insertBefore(hintContainer, resetButton);\n\n    this.rowCount = 0;\n  }\n\n  createAlphabetContainer() {\n    createAlphabetContainer(this.alphabet);\n  }\n\n  updateAlphabetContainer(guessedLetter, letterClass) {\n    // Show the alphabet container when the first guess is made\n    const container = document.getElementById('alphabetContainer');\n    if (container.style.display === 'none' || container.style.display === '') {\n      container.style.display = 'grid';\n    }\n    \n    updateAlphabetContainer(guessedLetter, letterClass, this.alphabet);\n  }\n\n  createRow() {\n    this.currentRow = createRow(this.wordLength, this.checkRowLetters.bind(this));\n    document.querySelector('.wrapper').appendChild(this.currentRow);\n    this.rowCount++;\n    this.currentRow.firstChild.focus();\n\n    console.log('Row created:', this.rowCount);\n    \n    // Explicitly reset the hint button states for the new row\n    resetHintButtonStates();\n    \n    // Update the current row in the hint handler to track which hint type was used\n    updateCurrentRow(this.rowCount);\n        \n    // Hint buttons are now added once below the wrapper in the play method\n  }\n\n  checkRowLetters() {\n    console.log('Check row letters called on row ' + this.currentRow.id);\n    if (!this.testIsRowComplete()) {\n      return;\n    }\n    \n    const letterStates = {};         // Track the state of each letter (correct, contains, notContains)\n    const wordLetterCounts = {};    // Track remaining occurrences of each letter in the target word\n    \n    // Initialize wordLetterCounts with the frequency of each letter in the current word\n    for (const letter of this.currentWord) {\n      wordLetterCounts[letter] = (wordLetterCounts[letter] || 0) + 1;\n    }\n    \n    let totalCorrect = 0; // Counter for correctly guessed letters\n    \n    // First Pass: Mark correct letters and track remaining occurrences\n    for (let i = 0; i < this.wordLength; i++) {\n      let inputBox = this.currentRow.children[i];\n      let enteredLetter = inputBox.value;\n      let correctLetter = this.currentWord[i];\n    \n      if (enteredLetter === correctLetter) {\n        inputBox.classList.add('correct'); // Visually mark as correct\n        this.updateAlphabetContainer(enteredLetter, 'correct'); // Update letter keyboard\n        letterStates[enteredLetter] = 'correct'; \n        totalCorrect++; // Increment total correct count\n        wordLetterCounts[enteredLetter]--; // Decrement remaining count in the word\n      } else {\n        letterStates[enteredLetter] = (letterStates[enteredLetter] || 0) + 1; // Increment count for misplaced letter\n      }\n    }\n    \n    // Second Pass: Handle misplaced and not contained letters\n    for (let i = 0; i < this.wordLength; i++) {\n      let inputBox = this.currentRow.children[i];\n      let enteredLetter = inputBox.value;\n    \n      if (letterStates[enteredLetter] === 'correct') {\n        continue; // Letter is already marked as correct, so skip it\n      } else if (this.currentWord.includes(enteredLetter) && wordLetterCounts[enteredLetter] > 0) {\n        inputBox.classList.add('contains');\n        this.updateAlphabetContainer(enteredLetter, 'contains');\n        wordLetterCounts[enteredLetter]--; // Decrement remaining count in the word\n      } else {\n        inputBox.classList.add('notContains');\n        this.updateAlphabetContainer(enteredLetter, 'notContains');\n      }\n    }\n    \n    Array.from(this.currentRow.children).forEach(input => input.disabled = true); // Disable inputs after checking\n    \n    // Game logic:\n    setTimeout(() => {\n      if (totalCorrect === this.wordLength) {\n        this.gameWon(); // Player guessed the word correctly\n      } else if ((this.rowCount + 1) >= this.maximumAttempts) {\n        this.gameLost(); // Player ran out of attempts\n      } else {\n        // Reset hint button states before creating a new row\n        resetHintButtonStates();\n        this.createRow(); // Create a new row for the next guess\n      }\n    }, 100); // Add a slight delay for visual feedback\n  }\n\n  testIsRowComplete() {\n    console.log('Test row complete called on row ' + this.currentRow.id);\n    if (!this.currentRow) {\n      return false;\n    }\n\n    return Array.from(this.currentRow.getElementsByTagName('input')).every(input => input.value);\n  }\n\n  gameWon() {\n    console.log(`Game won! player found the word (which was ${this.currentWord})`);\n\n    stopTimer(this.timerId);\n\n    const timeTaken = Math.floor((new Date() - this.startTime) / 1000);\n        \n    // Add score with timestamp and word info\n    this.highScores.push({\n      score: timeTaken,\n      word: this.currentWord,\n      wordLength: this.wordLength,\n      attempts: this.rowCount + 1,\n      date: new Date().toISOString()\n    });\n        \n    // Sort all scores by time (ascending)\n    this.highScores.sort((a, b) => {\n      // Handle both new format (object) and old format (number)\n      const scoreA = typeof a === 'object' ? a.score : a;\n      const scoreB = typeof b === 'object' ? b.score : b;\n      return scoreA - scoreB;\n    });\n\n    localStorage.setItem('highScores', JSON.stringify(this.highScores));\n\n    // Reset to first page when adding a new score\n    this.currentScorePage = 0;\n    this.displayHighScores();\n\n    showAlert(`Well done! You solved it in ${timeTaken} seconds with ${this.rowCount + 1} attempts. The word was ${this.currentWord}`, () => {\n      this.resetGame();\n    });\n  }\n\n  gameLost() {\n    console.log(`Game Lost! Maximum attempts reached for guessing the word: ${this.currentWord}`);\n\n    stopTimer(this.timerId);\n\n    showAlert(`Sorry, you've reached the maximum number of attempts. The word was: ${this.currentWord}`, () => {\n      this.resetGame();\n    });\n  }\n\n  displayHighScores() {\n    const highScoresList = document.getElementById('highScoresList');\n    highScoresList.innerHTML = '<h3 class=\"highScoresHeader\"> High Scores </h3>';\n\n    // Display all scores in the scrollable container\n    const totalScores = this.highScores.length;\n    \n    // Display all scores\n    for (let i = 0; i < totalScores; i++) {\n      const scoreData = this.highScores[i];\n      let listItem = document.createElement('li');\n            \n      // Handle both new format (object) and old format (number)\n      if (typeof scoreData === 'object') {\n        // Show both time and attempts\n        listItem.innerHTML = `<span class=\"score-rank\">#${i + 1}:</span> <span class=\"score-time\">${scoreData.score} seconds</span> <span class=\"score-attempts\">(${scoreData.attempts} attempts)</span>`;\n        \n        // Add tooltip with additional info\n        listItem.title = `Word: ${scoreData.word}, Length: ${scoreData.wordLength}`;\n      } else {\n        // Legacy format - just show time\n        listItem.textContent = `#${i + 1}: ${scoreData} seconds`;\n      }\n            \n      highScoresList.appendChild(listItem);\n    }\n\n    highScoresList.style.display = 'block';\n  }\n\n  resetGame() {\n    resetGameUI();\n    resetHintButtons();\n    this.rowCount = 0;\n    this.currentWord = '';\n    this.wordLength = '';\n    this.possibleWords = [];\n    this.timerDisplay.style.display = 'none';\n  }\n}\n\nexport default WordGame;","export function createAlphabetContainer(alphabet) {\n  const container = document.getElementById('alphabetContainer');\n  container.innerHTML = '';  // Clear container\n  \n  // Add a title/label above the grid to clarify its purpose\n  const label = document.createElement('div');\n  label.classList.add('alphabet-label');\n  label.textContent = 'Letter Status';\n  container.appendChild(label);\n  \n  // Create a grid container for the letters\n  const gridContainer = document.createElement('div');\n  gridContainer.classList.add('alphabet-grid');\n  \n  // Create a more balanced layout\n  // First 3 rows with 7 letters each (21 letters)\n  const firstThreeRows = alphabet.slice(0, 21);\n  // Last row with 5 letters, centered\n  const lastRow = alphabet.slice(21);\n  \n  // Add first three rows (7 letters each)\n  firstThreeRows.forEach(letter => {\n    const span = document.createElement('span');\n    span.textContent = letter;\n    span.classList.add('notGuessed');\n    span.setAttribute('aria-label', `Letter ${letter}, not yet guessed`);\n    gridContainer.appendChild(span);\n  });\n  \n  // Add spacer for centering last row if needed\n  if (lastRow.length < 7) {\n    const spacersNeeded = Math.floor((7 - lastRow.length) / 2);\n    \n    // Add left spacers\n    for (let i = 0; i < spacersNeeded; i++) {\n      const spacer = document.createElement('div');\n      spacer.classList.add('letter-spacer');\n      gridContainer.appendChild(spacer);\n    }\n    \n    // Add the remaining letters\n    lastRow.forEach(letter => {\n      const span = document.createElement('span');\n      span.textContent = letter;\n      span.classList.add('notGuessed');\n      span.setAttribute('aria-label', `Letter ${letter}, not yet guessed`);\n      gridContainer.appendChild(span);\n    });\n    \n    // Add right spacers\n    for (let i = 0; i < spacersNeeded; i++) {\n      const spacer = document.createElement('div');\n      spacer.classList.add('letter-spacer');\n      gridContainer.appendChild(spacer);\n    }\n  }\n  \n  container.appendChild(gridContainer);\n  // Don't display the container yet - it will be shown after the first guess\n  container.style.display = 'none';\n}\n\nexport function updateAlphabetContainer(guessedLetter, letterClass, alphabet) {\n  const container = document.getElementById('alphabetContainer');\n  \n  // Show the container if it's not already visible\n  if (container.style.display === 'none') {\n    container.style.display = 'grid';\n  }\n  \n  // Find the letter in the grid container by text content instead of position\n  const letterElements = document.querySelectorAll('#alphabetContainer .alphabet-grid span');\n  let letterElement = null;\n  \n  // Find the element with matching text content\n  for (const element of letterElements) {\n    if (element.textContent.toUpperCase() === guessedLetter.toUpperCase()) {\n      letterElement = element;\n      break;\n    }\n  }\n  \n  if (!letterElement) return; // Safety check\n  \n  letterElement.className = ''; // Remove all classes\n  letterElement.classList.add(letterClass);\n  \n  // Update the aria-label for accessibility\n  let status = 'unknown';\n  if (letterClass === 'correct') {\n    status = 'correct, in the right position';\n  } else if (letterClass === 'contains') {\n    status = 'in the word but wrong position';\n  } else if (letterClass === 'notContains') {\n    status = 'not in the word';\n  }\n  \n  letterElement.setAttribute('aria-label', `Letter ${guessedLetter}, ${status}`);\n}\n\nexport function createRow(wordLength, checkRowLetters) {\n  const newRow = document.createElement('div');\n  newRow.classList.add('wordRow');\n  newRow.id = 'row_' + Math.random().toString(36).substr(2, 9);\n\n  for (let i = 0; i < wordLength; i++) {\n    let newInputBox = document.createElement('input');\n    newInputBox.type = 'text';\n    newInputBox.classList.add('wordLetterBox');\n    newInputBox.maxLength = 1;\n    newInputBox.autocomplete = 'off';\n    newInputBox.autocorrect = 'off';\n    newInputBox.autocapitalize = 'off';\n    newInputBox.spellcheck = false;\n\n    // Handle input events for letter entry\n    newInputBox.addEventListener('input', (event) => {\n      // Normalize the input to lowercase\n      if (newInputBox.value) {\n        newInputBox.value = newInputBox.value.toLowerCase();\n      }\n            \n      // Validate the input is a letter\n      if (!newInputBox.value.match(/^[a-z]$/i)) {\n        newInputBox.value = ''; // clear the box if not a letter\n        return;\n      }\n\n      // Move focus to next input after valid entry\n      if (newInputBox.value && i < wordLength - 1) {\n        // Small timeout to ensure the focus change works on mobile\n        setTimeout(() => {\n          newRow.children[i + 1].focus();\n        }, 10);\n      }\n            \n      // Check if the row is complete\n      checkRowLetters();\n    });\n\n    // Handle keyboard navigation\n    newInputBox.addEventListener('keydown', (event) => {\n      // Backspace to previous input\n      if (event.key === 'Backspace' && i > 0 && newInputBox.value === '') {\n        newRow.children[i - 1].value = '';\n        newRow.children[i - 1].focus();\n        event.preventDefault();\n      }\n            \n      // Arrow key navigation\n      if (event.key === 'ArrowLeft' && i > 0) {\n        newRow.children[i - 1].focus();\n        event.preventDefault();\n      }\n      if (event.key === 'ArrowRight' && i < wordLength - 1) {\n        newRow.children[i + 1].focus();\n        event.preventDefault();\n      }\n    });\n        \n    // Touch-specific handling for mobile\n    newInputBox.addEventListener('touchend', (e) => {\n      // Prevent zoom on double-tap\n      e.preventDefault();\n      newInputBox.focus();\n    });\n\n    newRow.appendChild(newInputBox);\n  }\n\n  return newRow;\n}\n\nexport function resetGameUI() {\n  document.getElementById('wrapper').innerHTML = '';\n  document.getElementById('startGame').disabled = false;\n  document.getElementById('wordLengthInput').disabled = false;\n  document.getElementById('wordLengthInput').value = '';\n  document.getElementById('alphabetContainer').innerHTML = '';\n  document.getElementById('alphabetContainer').style.display = 'none';\n  document.getElementById('difficulty').style.display = 'none';\n  document.getElementById('resetGame').style.display = 'none';\n}\n\nexport function updateDifficulty(wordLength) {\n  const difficulty = document.getElementById('difficulty');\n  if (wordLength <= 4) {\n    difficulty.innerHTML = 'Difficulty: Easy';\n  } else if (wordLength <= 6) {\n    difficulty.innerHTML = 'Difficulty: Medium';\n  } else if (wordLength <= 8) {\n    difficulty.innerHTML = 'Difficulty: Hard';\n  } else {\n    difficulty.innerHTML = 'Difficulty: Very Hard';\n  }\n  difficulty.style.display = 'block';\n}","import '../scss/main.scss';\nimport WordGame from './WordGame.js';\nimport { setupModals } from './modals.js';\nimport { registerServiceWorker } from './serviceWorkerRegistration.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  setupModals();\n  const game = new WordGame();\n});\n\n// Register service worker for offline functionality\nregisterServiceWorker();\n","/**\n * Register the service worker for production builds\n */\nexport function registerServiceWorker() {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then(registration => {\n          console.log('SW registered: ', registration);\n        })\n        .catch(registrationError => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    });\n  }\n}\n"],"names":["alertCallback","showAlert","message","callback","alertMessage","document","getElementById","alertModal","innerHTML","style","display","alignItems","justifyContent","startTimer","startTime","timerDisplay","setInterval","now","Date","seconds","Math","floor","textContent","concat","stopTimer","timerId","clearInterval","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","API_TIMEOUT","parseInt","process","fetchPossibleWords","_x","_x2","_fetchPossibleWords","apply","arguments","_callee","pattern","wordLength","controller","timeoutId","response","data","words","_context","AbortController","setTimeout","abort","fetch","signal","clearTimeout","ok","status","json","filter","wordObj","_wordObj$tags","freq","parseFloat","tags","word","map","toLowerCase","t0","console","error","_next","_throw","currentRowHintType","currentRowNumber","createHintButtonsContainer","getLetterHint","getPositionHint","rowCount","container","createElement","classList","add","letterHintButton","id","dataset","usesLeft","cooldownTime","hintType","title","positionHintButton","addEventListener","disabled","updateCurrentRow","log","alert","positionButton","startButtonCooldown","letterButton","appendChild","button","cooldownStartTime","progressIndicator","updateInterval","elapsed","remove","parentNode","removeChild","progress","width","resetHintButtonStates","rowNumber","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_n","F","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","WordGame","_classCallCheck","this","possibleWords","alphabet","split","currentWord","currentRow","attempts","maximumAttempts","highScores","JSON","parse","localStorage","getItem","currentScorePage","scoresPerPage","init","_this","availableInputs","getElementsByTagName","input","includes","_step","targetInput","random","usedLetters","getUsedLetters","letterCounts","_iterator","lowerLetter","err","_step2","usedLetterCounts","_iterator2","letter","availableLetters","hintLetter","_step3","inputs","_iterator3","_step4","_iterator4","availablePositions","letterCount","usedCount","targetPosition","querySelectorAll","trim","logGameState","row","index","join","_this2","wordLengthInput","displayHighScores","play","resetGame","hintContainer","resetButton","_this3","difficulty","repeat","createAlphabetContainer","setAttribute","createRow","bind","insertBefore","_play","label","gridContainer","firstThreeRows","lastRow","span","spacersNeeded","spacer","guessedLetter","letterClass","letterElement","element","toUpperCase","className","updateAlphabetContainer","checkRowLetters","newRow","substr","_loop","newInputBox","maxLength","autocomplete","autocorrect","autocapitalize","spellcheck","event","match","children","focus","preventDefault","querySelector","firstChild","_this4","testIsRowComplete","_step5","letterStates","wordLetterCounts","_iterator5","totalCorrect","inputBox","enteredLetter","gameWon","gameLost","every","_this5","timeTaken","score","date","toISOString","sort","b","setItem","stringify","_this6","highScoresList","totalScores","scoreData","listItem","alertClose","alertResetButton","howToPlayBtn","howToPlayModal","howToPlayClose","onclick","body","overflow","window","target","navigator","serviceWorker","register","registration","registrationError"],"sourceRoot":""}